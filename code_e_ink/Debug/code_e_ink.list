
code_e_ink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c98  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800870c  0800870c  0000a090  2**0
                  CONTENTS
  4 .ARM          00000000  0800870c  0800870c  0000a090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800870c  0800870c  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800870c  0800870c  0000970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008710  08008710  00009710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08008714  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000090  080087a4  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080087a4  0000a310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5dc  00000000  00000000  0000a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283b  00000000  00000000  00018695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9f  00000000  00000000  0001bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019360  00000000  00000000  0001c777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013953  00000000  00000000  00035ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089625  00000000  00000000  0004942a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2a4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff0  00000000  00000000  000d2a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d6a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a5c 	.word	0x08005a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08005a5c 	.word	0x08005a5c

0800014c <decToBcd>:
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
  }
}
*/
uint8_t decToBcd(int val)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a0e      	ldr	r2, [pc, #56]	@ (8000190 <decToBcd+0x44>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	011b      	lsls	r3, r3, #4
 8000166:	b2d8      	uxtb	r0, r3
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <decToBcd+0x44>)
 800016c:	fb83 1302 	smull	r1, r3, r3, r2
 8000170:	1099      	asrs	r1, r3, #2
 8000172:	17d3      	asrs	r3, r2, #31
 8000174:	1ac9      	subs	r1, r1, r3
 8000176:	460b      	mov	r3, r1
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1ad1      	subs	r1, r2, r3
 8000180:	b2cb      	uxtb	r3, r1
 8000182:	4403      	add	r3, r0
 8000184:	b2db      	uxtb	r3, r3
}
 8000186:	4618      	mov	r0, r3
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	66666667 	.word	0x66666667

08000194 <Set_Time>:
{
  return (int)( (val/16*10) + (val%16) );
}

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000194:	b590      	push	{r4, r7, lr}
 8000196:	b089      	sub	sp, #36	@ 0x24
 8000198:	af04      	add	r7, sp, #16
 800019a:	4604      	mov	r4, r0
 800019c:	4608      	mov	r0, r1
 800019e:	4611      	mov	r1, r2
 80001a0:	461a      	mov	r2, r3
 80001a2:	4623      	mov	r3, r4
 80001a4:	71fb      	strb	r3, [r7, #7]
 80001a6:	4603      	mov	r3, r0
 80001a8:	71bb      	strb	r3, [r7, #6]
 80001aa:	460b      	mov	r3, r1
 80001ac:	717b      	strb	r3, [r7, #5]
 80001ae:	4613      	mov	r3, r2
 80001b0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4618      	mov	r0, r3
 80001b6:	f7ff ffc9 	bl	800014c <decToBcd>
 80001ba:	4603      	mov	r3, r0
 80001bc:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 80001be:	79bb      	ldrb	r3, [r7, #6]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <decToBcd>
 80001c6:	4603      	mov	r3, r0
 80001c8:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80001ca:	797b      	ldrb	r3, [r7, #5]
 80001cc:	4618      	mov	r0, r3
 80001ce:	f7ff ffbd 	bl	800014c <decToBcd>
 80001d2:	4603      	mov	r3, r0
 80001d4:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 80001d6:	793b      	ldrb	r3, [r7, #4]
 80001d8:	4618      	mov	r0, r3
 80001da:	f7ff ffb7 	bl	800014c <decToBcd>
 80001de:	4603      	mov	r3, r0
 80001e0:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 80001e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffb0 	bl	800014c <decToBcd>
 80001ec:	4603      	mov	r3, r0
 80001ee:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 80001f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffa9 	bl	800014c <decToBcd>
 80001fa:	4603      	mov	r3, r0
 80001fc:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 80001fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000202:	4618      	mov	r0, r3
 8000204:	f7ff ffa2 	bl	800014c <decToBcd>
 8000208:	4603      	mov	r3, r0
 800020a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800020c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000210:	9302      	str	r3, [sp, #8]
 8000212:	2307      	movs	r3, #7
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	2200      	movs	r2, #0
 8000220:	2168      	movs	r1, #104	@ 0x68
 8000222:	4803      	ldr	r0, [pc, #12]	@ (8000230 <Set_Time+0x9c>)
 8000224:	f001 f8ca 	bl	80013bc <HAL_I2C_Mem_Write>
}
 8000228:	bf00      	nop
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	bd90      	pop	{r4, r7, pc}
 8000230:	200000ac 	.word	0x200000ac

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb81 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f81b 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f8ed 	bl	8000420 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000246:	f000 f88b 	bl	8000360 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f8bf 	bl	80003cc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800024e:	f000 f859 	bl	8000304 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 EPD_test();
 8000252:	f003 f9c1 	bl	80035d8 <EPD_test>
  Set_Time
 8000256:	2319      	movs	r3, #25
 8000258:	9302      	str	r3, [sp, #8]
 800025a:	2302      	movs	r3, #2
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	231c      	movs	r3, #28
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2306      	movs	r3, #6
 8000264:	220e      	movs	r2, #14
 8000266:	2103      	movs	r1, #3
 8000268:	2000      	movs	r0, #0
 800026a:	f7ff ff93 	bl	8000194 <Set_Time>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Get_Time();

	  HAL_Delay(10000);
 800026e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000272:	f000 fbc7 	bl	8000a04 <HAL_Delay>
 8000276:	e7fa      	b.n	800026e <main+0x3a>

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	@ 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	@ 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f004 ff08 	bl	800509c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029a:	2301      	movs	r3, #1
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	2302      	movs	r3, #2
 80002ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fbe3 	bl	8001a8c <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002cc:	f000 f92e 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fe50 	bl	8001f90 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f6:	f000 f919 	bl	800052c <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	@ 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000308:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <MX_I2C1_Init+0x50>)
 800030a:	4a13      	ldr	r2, [pc, #76]	@ (8000358 <MX_I2C1_Init+0x54>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000310:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_I2C1_Init+0x58>)
 8000312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000314:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000342:	f000 fef7 	bl	8001134 <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f8ee 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	200000ac 	.word	0x200000ac
 8000358:	40005400 	.word	0x40005400
 800035c:	000186a0 	.word	0x000186a0

08000360 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000364:	4b17      	ldr	r3, [pc, #92]	@ (80003c4 <MX_SPI1_Init+0x64>)
 8000366:	4a18      	ldr	r2, [pc, #96]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <MX_SPI1_Init+0x64>)
 800036c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000372:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037e:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_SPI1_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_SPI1_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_SPI1_Init+0x64>)
 800038c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000390:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_SPI1_Init+0x64>)
 8000394:	2228      	movs	r2, #40	@ 0x28
 8000396:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <MX_SPI1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_SPI1_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <MX_SPI1_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_SPI1_Init+0x64>)
 80003ac:	220a      	movs	r2, #10
 80003ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_SPI1_Init+0x64>)
 80003b2:	f001 ff7b 	bl	80022ac <HAL_SPI_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003bc:	f000 f8b6 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000100 	.word	0x20000100
 80003c8:	40013000 	.word	0x40013000

080003cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003d2:	4a12      	ldr	r2, [pc, #72]	@ (800041c <MX_USART1_UART_Init+0x50>)
 80003d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_USART1_UART_Init+0x4c>)
 8000404:	f002 f9d3 	bl	80027ae <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800040e:	f000 f88d 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000158 	.word	0x20000158
 800041c:	40013800 	.word	0x40013800

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a23      	ldr	r2, [pc, #140]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b21      	ldr	r3, [pc, #132]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b1e      	ldr	r3, [pc, #120]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a1d      	ldr	r2, [pc, #116]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a17      	ldr	r2, [pc, #92]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <MX_GPIO_Init+0xa8>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin|PWR_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000482:	4812      	ldr	r0, [pc, #72]	@ (80004cc <MX_GPIO_Init+0xac>)
 8000484:	f000 fe3d 	bl	8001102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000488:	2301      	movs	r3, #1
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	480c      	ldr	r0, [pc, #48]	@ (80004cc <MX_GPIO_Init+0xac>)
 800049c:	f000 fc96 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin PWR_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin|PWR_Pin;
 80004a0:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 80004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <MX_GPIO_Init+0xac>)
 80004ba:	f000 fc87 	bl	8000dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800

080004d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0f      	ldr	r2, [pc, #60]	@ (800051c <HAL_UART_RxCpltCallback+0x4c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d117      	bne.n	8000512 <HAL_UART_RxCpltCallback+0x42>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 80004e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <HAL_UART_RxCpltCallback+0x50>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80004e8:	d105      	bne.n	80004f6 <HAL_UART_RxCpltCallback+0x26>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	480d      	ldr	r0, [pc, #52]	@ (8000524 <HAL_UART_RxCpltCallback+0x54>)
 80004f0:	f000 fe07 	bl	8001102 <HAL_GPIO_WritePin>
 80004f4:	e008      	b.n	8000508 <HAL_UART_RxCpltCallback+0x38>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_UART_RxCpltCallback+0x50>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b59      	cmp	r3, #89	@ 0x59
 80004fc:	d104      	bne.n	8000508 <HAL_UART_RxCpltCallback+0x38>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	4808      	ldr	r0, [pc, #32]	@ (8000524 <HAL_UART_RxCpltCallback+0x54>)
 8000504:	f000 fdfd 	bl	8001102 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000508:	2201      	movs	r2, #1
 800050a:	4905      	ldr	r1, [pc, #20]	@ (8000520 <HAL_UART_RxCpltCallback+0x50>)
 800050c:	4806      	ldr	r0, [pc, #24]	@ (8000528 <HAL_UART_RxCpltCallback+0x58>)
 800050e:	f002 f99e 	bl	800284e <HAL_UART_Receive_IT>
  }
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40013800 	.word	0x40013800
 8000520:	200001a0 	.word	0x200001a0
 8000524:	40010c00 	.word	0x40010c00
 8000528:	20000158 	.word	0x20000158

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <Error_Handler+0x8>

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053e:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <HAL_MspInit+0x5c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a14      	ldr	r2, [pc, #80]	@ (8000594 <HAL_MspInit+0x5c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <HAL_MspInit+0x5c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a0e      	ldr	r2, [pc, #56]	@ (8000594 <HAL_MspInit+0x5c>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800056e:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <HAL_MspInit+0x60>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <HAL_MspInit+0x60>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000
 8000598:	40010000 	.word	0x40010000

0800059c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a15      	ldr	r2, [pc, #84]	@ (800060c <HAL_I2C_MspInit+0x70>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d123      	bne.n	8000604 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005bc:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <HAL_I2C_MspInit+0x74>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <HAL_I2C_MspInit+0x74>)
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <HAL_I2C_MspInit+0x74>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005d4:	23c0      	movs	r3, #192	@ 0xc0
 80005d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d8:	2312      	movs	r3, #18
 80005da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	480b      	ldr	r0, [pc, #44]	@ (8000614 <HAL_I2C_MspInit+0x78>)
 80005e8:	f000 fbf0 	bl	8000dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <HAL_I2C_MspInit+0x74>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a07      	ldr	r2, [pc, #28]	@ (8000610 <HAL_I2C_MspInit+0x74>)
 80005f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f6:	61d3      	str	r3, [r2, #28]
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <HAL_I2C_MspInit+0x74>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40005400 	.word	0x40005400
 8000610:	40021000 	.word	0x40021000
 8000614:	40010c00 	.word	0x40010c00

08000618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <HAL_SPI_MspInit+0x70>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d123      	bne.n	8000680 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <HAL_SPI_MspInit+0x74>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a13      	ldr	r2, [pc, #76]	@ (800068c <HAL_SPI_MspInit+0x74>)
 800063e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_SPI_MspInit+0x74>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <HAL_SPI_MspInit+0x74>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <HAL_SPI_MspInit+0x74>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <HAL_SPI_MspInit+0x74>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000668:	23a0      	movs	r3, #160	@ 0xa0
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <HAL_SPI_MspInit+0x78>)
 800067c:	f000 fba6 	bl	8000dcc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40013000 	.word	0x40013000
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <HAL_UART_MspInit+0x9c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d139      	bne.n	8000728 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <HAL_UART_MspInit+0xa0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000734 <HAL_UART_MspInit+0xa0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_UART_MspInit+0xa0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <HAL_UART_MspInit+0xa0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <HAL_UART_MspInit+0xa0>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <HAL_UART_MspInit+0xa0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480f      	ldr	r0, [pc, #60]	@ (8000738 <HAL_UART_MspInit+0xa4>)
 80006fa:	f000 fb67 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4809      	ldr	r0, [pc, #36]	@ (8000738 <HAL_UART_MspInit+0xa4>)
 8000714:	f000 fb5a 	bl	8000dcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2025      	movs	r0, #37	@ 0x25
 800071e:	f000 fa6c 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000722:	2025      	movs	r0, #37	@ 0x25
 8000724:	f000 fa85 	bl	8000c32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40013800 	.word	0x40013800
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <UsageFault_Handler+0x4>

08000764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f91e 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000798:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <USART1_IRQHandler+0x10>)
 800079a:	f002 f87d 	bl	8002898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000158 	.word	0x20000158

080007a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e00a      	b.n	80007d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ba:	f3af 8000 	nop.w
 80007be:	4601      	mov	r1, r0
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60ba      	str	r2, [r7, #8]
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dbf0      	blt.n	80007ba <_read+0x12>
  }

  return len;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e009      	b.n	8000808 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf1      	blt.n	80007f4 <_write+0x12>
  }
  return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_close>:

int _close(int file)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000840:	605a      	str	r2, [r3, #4]
  return 0;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <_isatty>:

int _isatty(int file)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000862:	b480      	push	{r7}
 8000864:	b085      	sub	sp, #20
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
	...

0800087c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <_sbrk+0x5c>)
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <_sbrk+0x60>)
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <_sbrk+0x64>)
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <_sbrk+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d207      	bcs.n	80008bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ac:	f004 fc54 	bl	8005158 <__errno>
 80008b0:	4603      	mov	r3, r0
 80008b2:	220c      	movs	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e009      	b.n	80008d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <_sbrk+0x64>)
 80008cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20005000 	.word	0x20005000
 80008dc:	00000400 	.word	0x00000400
 80008e0:	200001a4 	.word	0x200001a4
 80008e4:	20000310 	.word	0x20000310

080008e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff fff8 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fa:	490c      	ldr	r1, [pc, #48]	@ (800092c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a09      	ldr	r2, [pc, #36]	@ (8000934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000910:	4c09      	ldr	r4, [pc, #36]	@ (8000938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f004 fc21 	bl	8005164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000922:	f7ff fc87 	bl	8000234 <main>
  bx lr
 8000926:	4770      	bx	lr
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000930:	08008714 	.word	0x08008714
  ldr r2, =_sbss
 8000934:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000938:	20000310 	.word	0x20000310

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f947 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fdec 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f95f 	bl	8000c4e <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f927 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a03      	ldr	r2, [pc, #12]	@ (80009ec <HAL_IncTick+0x20>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000008 	.word	0x20000008
 80009ec:	200001a8 	.word	0x200001a8

080009f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	@ (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	200001a8 	.word	0x200001a8

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fff0 	bl	80009f0 <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffe0 	bl	80009f0 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4906      	ldr	r1, [pc, #24]	@ (8000ae4 <__NVIC_EnableIRQ+0x34>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	@ (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	@ (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	@ 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	@ 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff2d 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff42 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff35 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d008      	beq.n	8000c90 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2204      	movs	r2, #4
 8000c82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e020      	b.n	8000cd2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 020e 	bic.w	r2, r2, #14
 8000c9e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0201 	bic.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d005      	beq.n	8000d00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e051      	b.n	8000da4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 020e 	bic.w	r2, r2, #14
 8000d0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a22      	ldr	r2, [pc, #136]	@ (8000db0 <HAL_DMA_Abort_IT+0xd4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d029      	beq.n	8000d7e <HAL_DMA_Abort_IT+0xa2>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <HAL_DMA_Abort_IT+0xd8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d022      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x9e>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1f      	ldr	r2, [pc, #124]	@ (8000db8 <HAL_DMA_Abort_IT+0xdc>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01a      	beq.n	8000d74 <HAL_DMA_Abort_IT+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1e      	ldr	r2, [pc, #120]	@ (8000dbc <HAL_DMA_Abort_IT+0xe0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d012      	beq.n	8000d6e <HAL_DMA_Abort_IT+0x92>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <HAL_DMA_Abort_IT+0xe4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00a      	beq.n	8000d68 <HAL_DMA_Abort_IT+0x8c>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <HAL_DMA_Abort_IT+0xe8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d102      	bne.n	8000d62 <HAL_DMA_Abort_IT+0x86>
 8000d5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d60:	e00e      	b.n	8000d80 <HAL_DMA_Abort_IT+0xa4>
 8000d62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d66:	e00b      	b.n	8000d80 <HAL_DMA_Abort_IT+0xa4>
 8000d68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d6c:	e008      	b.n	8000d80 <HAL_DMA_Abort_IT+0xa4>
 8000d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d72:	e005      	b.n	8000d80 <HAL_DMA_Abort_IT+0xa4>
 8000d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d78:	e002      	b.n	8000d80 <HAL_DMA_Abort_IT+0xa4>
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	e000      	b.n	8000d80 <HAL_DMA_Abort_IT+0xa4>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4a11      	ldr	r2, [pc, #68]	@ (8000dc8 <HAL_DMA_Abort_IT+0xec>)
 8000d82:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	4798      	blx	r3
    } 
  }
  return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020008 	.word	0x40020008
 8000db4:	4002001c 	.word	0x4002001c
 8000db8:	40020030 	.word	0x40020030
 8000dbc:	40020044 	.word	0x40020044
 8000dc0:	40020058 	.word	0x40020058
 8000dc4:	4002006c 	.word	0x4002006c
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b08b      	sub	sp, #44	@ 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e169      	b.n	80010b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de0:	2201      	movs	r2, #1
 8000de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8158 	bne.w	80010ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4a9a      	ldr	r2, [pc, #616]	@ (800106c <HAL_GPIO_Init+0x2a0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d05e      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e08:	4a98      	ldr	r2, [pc, #608]	@ (800106c <HAL_GPIO_Init+0x2a0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d875      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e0e:	4a98      	ldr	r2, [pc, #608]	@ (8001070 <HAL_GPIO_Init+0x2a4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d058      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e14:	4a96      	ldr	r2, [pc, #600]	@ (8001070 <HAL_GPIO_Init+0x2a4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d86f      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e1a:	4a96      	ldr	r2, [pc, #600]	@ (8001074 <HAL_GPIO_Init+0x2a8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d052      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e20:	4a94      	ldr	r2, [pc, #592]	@ (8001074 <HAL_GPIO_Init+0x2a8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d869      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e26:	4a94      	ldr	r2, [pc, #592]	@ (8001078 <HAL_GPIO_Init+0x2ac>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d04c      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e2c:	4a92      	ldr	r2, [pc, #584]	@ (8001078 <HAL_GPIO_Init+0x2ac>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d863      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e32:	4a92      	ldr	r2, [pc, #584]	@ (800107c <HAL_GPIO_Init+0x2b0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d046      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e38:	4a90      	ldr	r2, [pc, #576]	@ (800107c <HAL_GPIO_Init+0x2b0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d85d      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d82a      	bhi.n	8000e98 <HAL_GPIO_Init+0xcc>
 8000e42:	2b12      	cmp	r3, #18
 8000e44:	d859      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e46:	a201      	add	r2, pc, #4	@ (adr r2, 8000e4c <HAL_GPIO_Init+0x80>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000ec7 	.word	0x08000ec7
 8000e50:	08000ea1 	.word	0x08000ea1
 8000e54:	08000eb3 	.word	0x08000eb3
 8000e58:	08000ef5 	.word	0x08000ef5
 8000e5c:	08000efb 	.word	0x08000efb
 8000e60:	08000efb 	.word	0x08000efb
 8000e64:	08000efb 	.word	0x08000efb
 8000e68:	08000efb 	.word	0x08000efb
 8000e6c:	08000efb 	.word	0x08000efb
 8000e70:	08000efb 	.word	0x08000efb
 8000e74:	08000efb 	.word	0x08000efb
 8000e78:	08000efb 	.word	0x08000efb
 8000e7c:	08000efb 	.word	0x08000efb
 8000e80:	08000efb 	.word	0x08000efb
 8000e84:	08000efb 	.word	0x08000efb
 8000e88:	08000efb 	.word	0x08000efb
 8000e8c:	08000efb 	.word	0x08000efb
 8000e90:	08000ea9 	.word	0x08000ea9
 8000e94:	08000ebd 	.word	0x08000ebd
 8000e98:	4a79      	ldr	r2, [pc, #484]	@ (8001080 <HAL_GPIO_Init+0x2b4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9e:	e02c      	b.n	8000efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e029      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	3304      	adds	r3, #4
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e024      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e01f      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	330c      	adds	r3, #12
 8000ec2:	623b      	str	r3, [r7, #32]
          break;
 8000ec4:	e01a      	b.n	8000efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e013      	b.n	8000efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d105      	bne.n	8000ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	611a      	str	r2, [r3, #16]
          break;
 8000ee6:	e009      	b.n	8000efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	615a      	str	r2, [r3, #20]
          break;
 8000ef2:	e003      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x130>
          break;
 8000efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	@ 0xff
 8000f00:	d801      	bhi.n	8000f06 <HAL_GPIO_Init+0x13a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	e001      	b.n	8000f0a <HAL_GPIO_Init+0x13e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2bff      	cmp	r3, #255	@ 0xff
 8000f10:	d802      	bhi.n	8000f18 <HAL_GPIO_Init+0x14c>
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x152>
 8000f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1a:	3b08      	subs	r3, #8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	210f      	movs	r1, #15
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	6a39      	ldr	r1, [r7, #32]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 80b1 	beq.w	80010ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a4c      	ldr	r2, [pc, #304]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b4a      	ldr	r3, [pc, #296]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f64:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <HAL_GPIO_Init+0x2bc>)
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a40      	ldr	r2, [pc, #256]	@ (800108c <HAL_GPIO_Init+0x2c0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d013      	beq.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3f      	ldr	r2, [pc, #252]	@ (8001090 <HAL_GPIO_Init+0x2c4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001094 <HAL_GPIO_Init+0x2c8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1e4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8001098 <HAL_GPIO_Init+0x2cc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1e0>
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e006      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e004      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fca:	492f      	ldr	r1, [pc, #188]	@ (8001088 <HAL_GPIO_Init+0x2bc>)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	492c      	ldr	r1, [pc, #176]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	608b      	str	r3, [r1, #8]
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4928      	ldr	r1, [pc, #160]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	4922      	ldr	r1, [pc, #136]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	60cb      	str	r3, [r1, #12]
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	43db      	mvns	r3, r3
 8001022:	491e      	ldr	r1, [pc, #120]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8001024:	4013      	ands	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4918      	ldr	r1, [pc, #96]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	4914      	ldr	r1, [pc, #80]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 800104c:	4013      	ands	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d021      	beq.n	80010a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	490e      	ldr	r1, [pc, #56]	@ (800109c <HAL_GPIO_Init+0x2d0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
 8001068:	e021      	b.n	80010ae <HAL_GPIO_Init+0x2e2>
 800106a:	bf00      	nop
 800106c:	10320000 	.word	0x10320000
 8001070:	10310000 	.word	0x10310000
 8001074:	10220000 	.word	0x10220000
 8001078:	10210000 	.word	0x10210000
 800107c:	10120000 	.word	0x10120000
 8001080:	10110000 	.word	0x10110000
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40011000 	.word	0x40011000
 8001098:	40011400 	.word	0x40011400
 800109c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <HAL_GPIO_Init+0x304>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <HAL_GPIO_Init+0x304>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	3301      	adds	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	fa22 f303 	lsr.w	r3, r2, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f47f ae8e 	bne.w	8000de0 <HAL_GPIO_Init+0x14>
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	372c      	adds	r7, #44	@ 0x2c
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	807b      	strh	r3, [r7, #2]
 800110e:	4613      	mov	r3, r2
 8001110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001112:	787b      	ldrb	r3, [r7, #1]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800111e:	e003      	b.n	8001128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	041a      	lsls	r2, r3, #16
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
	...

08001134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e12b      	b.n	800139e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fa1e 	bl	800059c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2224      	movs	r2, #36	@ 0x24
 8001164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001198:	f001 f842 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 800119c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a81      	ldr	r2, [pc, #516]	@ (80013a8 <HAL_I2C_Init+0x274>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d807      	bhi.n	80011b8 <HAL_I2C_Init+0x84>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4a80      	ldr	r2, [pc, #512]	@ (80013ac <HAL_I2C_Init+0x278>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	bf94      	ite	ls
 80011b0:	2301      	movls	r3, #1
 80011b2:	2300      	movhi	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	e006      	b.n	80011c6 <HAL_I2C_Init+0x92>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a7d      	ldr	r2, [pc, #500]	@ (80013b0 <HAL_I2C_Init+0x27c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	bf94      	ite	ls
 80011c0:	2301      	movls	r3, #1
 80011c2:	2300      	movhi	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0e7      	b.n	800139e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4a78      	ldr	r2, [pc, #480]	@ (80013b4 <HAL_I2C_Init+0x280>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a6a      	ldr	r2, [pc, #424]	@ (80013a8 <HAL_I2C_Init+0x274>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d802      	bhi.n	8001208 <HAL_I2C_Init+0xd4>
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3301      	adds	r3, #1
 8001206:	e009      	b.n	800121c <HAL_I2C_Init+0xe8>
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	4a69      	ldr	r2, [pc, #420]	@ (80013b8 <HAL_I2C_Init+0x284>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	3301      	adds	r3, #1
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	430b      	orrs	r3, r1
 8001222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800122e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	495c      	ldr	r1, [pc, #368]	@ (80013a8 <HAL_I2C_Init+0x274>)
 8001238:	428b      	cmp	r3, r1
 800123a:	d819      	bhi.n	8001270 <HAL_I2C_Init+0x13c>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1e59      	subs	r1, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fbb1 f3f3 	udiv	r3, r1, r3
 800124a:	1c59      	adds	r1, r3, #1
 800124c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001250:	400b      	ands	r3, r1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <HAL_I2C_Init+0x138>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1e59      	subs	r1, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fbb1 f3f3 	udiv	r3, r1, r3
 8001264:	3301      	adds	r3, #1
 8001266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126a:	e051      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 800126c:	2304      	movs	r3, #4
 800126e:	e04f      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d111      	bne.n	800129c <HAL_I2C_Init+0x168>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	3301      	adds	r3, #1
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	e012      	b.n	80012c2 <HAL_I2C_Init+0x18e>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_Init+0x196>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e022      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10e      	bne.n	80012f0 <HAL_I2C_Init+0x1bc>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1e58      	subs	r0, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	440b      	add	r3, r1
 80012e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ee:	e00f      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e58      	subs	r0, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	0099      	lsls	r1, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	fbb0 f3f3 	udiv	r3, r0, r3
 8001306:	3301      	adds	r3, #1
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	4313      	orrs	r3, r2
 8001316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800133e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6911      	ldr	r1, [r2, #16]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	4311      	orrs	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	430b      	orrs	r3, r1
 8001352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	000186a0 	.word	0x000186a0
 80013ac:	001e847f 	.word	0x001e847f
 80013b0:	003d08ff 	.word	0x003d08ff
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	10624dd3 	.word	0x10624dd3

080013bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	817b      	strh	r3, [r7, #10]
 80013ce:	460b      	mov	r3, r1
 80013d0:	813b      	strh	r3, [r7, #8]
 80013d2:	4613      	mov	r3, r2
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013d6:	f7ff fb0b 	bl	80009f0 <HAL_GetTick>
 80013da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	f040 80d9 	bne.w	800159c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2319      	movs	r3, #25
 80013f0:	2201      	movs	r2, #1
 80013f2:	496d      	ldr	r1, [pc, #436]	@ (80015a8 <HAL_I2C_Mem_Write+0x1ec>)
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f971 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001400:	2302      	movs	r3, #2
 8001402:	e0cc      	b.n	800159e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_I2C_Mem_Write+0x56>
 800140e:	2302      	movs	r3, #2
 8001410:	e0c5      	b.n	800159e <HAL_I2C_Mem_Write+0x1e2>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b01      	cmp	r3, #1
 8001426:	d007      	beq.n	8001438 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2221      	movs	r2, #33	@ 0x21
 800144c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2240      	movs	r2, #64	@ 0x40
 8001454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a3a      	ldr	r2, [r7, #32]
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800146e:	b29a      	uxth	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a4d      	ldr	r2, [pc, #308]	@ (80015ac <HAL_I2C_Mem_Write+0x1f0>)
 8001478:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800147a:	88f8      	ldrh	r0, [r7, #6]
 800147c:	893a      	ldrh	r2, [r7, #8]
 800147e:	8979      	ldrh	r1, [r7, #10]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4603      	mov	r3, r0
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f890 	bl	80015b0 <I2C_RequestMemoryWrite>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d052      	beq.n	800153c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e081      	b.n	800159e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fa36 	bl	8001910 <I2C_WaitOnTXEFlagUntilTimeout>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00d      	beq.n	80014c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d107      	bne.n	80014c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e06b      	b.n	800159e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b04      	cmp	r3, #4
 8001502:	d11b      	bne.n	800153c <HAL_I2C_Mem_Write+0x180>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	d017      	beq.n	800153c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001526:	3b01      	subs	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1aa      	bne.n	800149a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 fa29 	bl	80019a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	2b04      	cmp	r3, #4
 800155a:	d107      	bne.n	800156c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800156a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e016      	b.n	800159e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800157e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	e000      	b.n	800159e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800159c:	2302      	movs	r3, #2
  }
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	00100002 	.word	0x00100002
 80015ac:	ffff0000 	.word	0xffff0000

080015b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	4603      	mov	r3, r0
 80015c0:	817b      	strh	r3, [r7, #10]
 80015c2:	460b      	mov	r3, r1
 80015c4:	813b      	strh	r3, [r7, #8]
 80015c6:	4613      	mov	r3, r2
 80015c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f878 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001600:	d103      	bne.n	800160a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e05f      	b.n	80016ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800160e:	897b      	ldrh	r3, [r7, #10]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800161c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	6a3a      	ldr	r2, [r7, #32]
 8001622:	492d      	ldr	r1, [pc, #180]	@ (80016d8 <I2C_RequestMemoryWrite+0x128>)
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f8d3 	bl	80017d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e04c      	b.n	80016ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164c:	6a39      	ldr	r1, [r7, #32]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f95e 	bl	8001910 <I2C_WaitOnTXEFlagUntilTimeout>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00d      	beq.n	8001676 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	2b04      	cmp	r3, #4
 8001660:	d107      	bne.n	8001672 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001670:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e02b      	b.n	80016ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800167c:	893b      	ldrh	r3, [r7, #8]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	e021      	b.n	80016cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001688:	893b      	ldrh	r3, [r7, #8]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	6a39      	ldr	r1, [r7, #32]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f938 	bl	8001910 <I2C_WaitOnTXEFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00d      	beq.n	80016c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d107      	bne.n	80016be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e005      	b.n	80016ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016c2:	893b      	ldrh	r3, [r7, #8]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	00010002 	.word	0x00010002

080016dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ec:	e048      	b.n	8001780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d044      	beq.n	8001780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f6:	f7ff f97b 	bl	80009f0 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d302      	bcc.n	800170c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d139      	bne.n	8001780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10d      	bne.n	8001732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	43da      	mvns	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4013      	ands	r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	e00c      	b.n	800174c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	43da      	mvns	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4013      	ands	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d116      	bne.n	8001780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f043 0220 	orr.w	r2, r3, #32
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e023      	b.n	80017c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	0c1b      	lsrs	r3, r3, #16
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d10d      	bne.n	80017a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	43da      	mvns	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	4013      	ands	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	e00c      	b.n	80017c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4013      	ands	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf0c      	ite	eq
 80017b8:	2301      	moveq	r3, #1
 80017ba:	2300      	movne	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d093      	beq.n	80016ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017de:	e071      	b.n	80018c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ee:	d123      	bne.n	8001838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	f043 0204 	orr.w	r2, r3, #4
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e067      	b.n	8001908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183e:	d041      	beq.n	80018c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001840:	f7ff f8d6 	bl	80009f0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d302      	bcc.n	8001856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d136      	bne.n	80018c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d10c      	bne.n	800187a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4013      	ands	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	e00b      	b.n	8001892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	43da      	mvns	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4013      	ands	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f043 0220 	orr.w	r2, r3, #32
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e021      	b.n	8001908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10c      	bne.n	80018e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	43da      	mvns	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4013      	ands	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	e00b      	b.n	8001900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4013      	ands	r3, r2
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	f47f af6d 	bne.w	80017e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800191c:	e034      	b.n	8001988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f886 	bl	8001a30 <I2C_IsAcknowledgeFailed>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e034      	b.n	8001998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d028      	beq.n	8001988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff f85b 	bl	80009f0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11d      	bne.n	8001988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001956:	2b80      	cmp	r3, #128	@ 0x80
 8001958:	d016      	beq.n	8001988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e007      	b.n	8001998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001992:	2b80      	cmp	r3, #128	@ 0x80
 8001994:	d1c3      	bne.n	800191e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019ac:	e034      	b.n	8001a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f83e 	bl	8001a30 <I2C_IsAcknowledgeFailed>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e034      	b.n	8001a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d028      	beq.n	8001a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c6:	f7ff f813 	bl	80009f0 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d302      	bcc.n	80019dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11d      	bne.n	8001a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d016      	beq.n	8001a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f043 0220 	orr.w	r2, r3, #32
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e007      	b.n	8001a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d1c3      	bne.n	80019ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a46:	d11b      	bne.n	8001a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e272      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8087 	beq.w	8001bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aac:	4b92      	ldr	r3, [pc, #584]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d112      	bne.n	8001aea <HAL_RCC_OscConfig+0x5e>
 8001ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad0:	d10b      	bne.n	8001aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	4b89      	ldr	r3, [pc, #548]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d06c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x12c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d168      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e24c      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x76>
 8001af4:	4b80      	ldr	r3, [pc, #512]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a7f      	ldr	r2, [pc, #508]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e02e      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x98>
 8001b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7a      	ldr	r2, [pc, #488]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b78      	ldr	r3, [pc, #480]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a77      	ldr	r2, [pc, #476]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e01d      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0xbc>
 8001b2e:	4b72      	ldr	r3, [pc, #456]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a71      	ldr	r2, [pc, #452]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b48:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b68      	ldr	r3, [pc, #416]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a67      	ldr	r2, [pc, #412]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7fe ff42 	bl	80009f0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7fe ff3e 	bl	80009f0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e200      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0xe4>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe ff2e 	bl	80009f0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7fe ff2a 	bl	80009f0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	@ 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1ec      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	4b53      	ldr	r3, [pc, #332]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x10c>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bd2:	4b49      	ldr	r3, [pc, #292]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d11c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x18c>
 8001bde:	4b46      	ldr	r3, [pc, #280]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d116      	bne.n	8001c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	4b43      	ldr	r3, [pc, #268]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_RCC_OscConfig+0x176>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e1c0      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4939      	ldr	r1, [pc, #228]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	e03a      	b.n	8001c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d020      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c20:	4b36      	ldr	r3, [pc, #216]	@ (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7fe fee3 	bl	80009f0 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7fe fedf 	bl	80009f0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e1a1      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4927      	ldr	r1, [pc, #156]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7fe fec2 	bl	80009f0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c70:	f7fe febe 	bl	80009f0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e180      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03a      	beq.n	8001d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d019      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7fe fea2 	bl	80009f0 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7fe fe9e 	bl	80009f0 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e160      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f000 face 	bl	8002270 <RCC_Delay>
 8001cd4:	e01c      	b.n	8001d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7fe fe88 	bl	80009f0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce2:	e00f      	b.n	8001d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7fe fe84 	bl	80009f0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d908      	bls.n	8001d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e146      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	42420000 	.word	0x42420000
 8001d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	4b92      	ldr	r3, [pc, #584]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e9      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a6 	beq.w	8001e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d22:	4b8b      	ldr	r3, [pc, #556]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10d      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b88      	ldr	r3, [pc, #544]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a87      	ldr	r2, [pc, #540]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b85      	ldr	r3, [pc, #532]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b82      	ldr	r3, [pc, #520]	@ (8001f54 <HAL_RCC_OscConfig+0x4c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d56:	4b7f      	ldr	r3, [pc, #508]	@ (8001f54 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f54 <HAL_RCC_OscConfig+0x4c8>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7fe fe45 	bl	80009f0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7fe fe41 	bl	80009f0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b64      	cmp	r3, #100	@ 0x64
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e103      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	4b75      	ldr	r3, [pc, #468]	@ (8001f54 <HAL_RCC_OscConfig+0x4c8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x312>
 8001d90:	4b6f      	ldr	r3, [pc, #444]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a6e      	ldr	r2, [pc, #440]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_OscConfig+0x36e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x334>
 8001da6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a69      	ldr	r2, [pc, #420]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	4b67      	ldr	r3, [pc, #412]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a66      	ldr	r2, [pc, #408]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	e01c      	b.n	8001dfa <HAL_RCC_OscConfig+0x36e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x356>
 8001dc8:	4b61      	ldr	r3, [pc, #388]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a60      	ldr	r2, [pc, #384]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0x36e>
 8001de2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d015      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7fe fdf5 	bl	80009f0 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe fdf1 	bl	80009f0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0b1      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	4b4b      	ldr	r3, [pc, #300]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ee      	beq.n	8001e0a <HAL_RCC_OscConfig+0x37e>
 8001e2c:	e014      	b.n	8001e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7fe fddf 	bl	80009f0 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7fe fddb 	bl	80009f0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e09b      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	4b40      	ldr	r3, [pc, #256]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a3b      	ldr	r2, [pc, #236]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8087 	beq.w	8001f82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e74:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d061      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d146      	bne.n	8001f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fdaf 	bl	80009f0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe fdab 	bl	80009f0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e06d      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea8:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ebc:	d108      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	4921      	ldr	r1, [pc, #132]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a19      	ldr	r1, [r3, #32]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe fd7f 	bl	80009f0 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7fe fd7b 	bl	80009f0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e03d      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x46a>
 8001f14:	e035      	b.n	8001f82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fd68 	bl	80009f0 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe fd64 	bl	80009f0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e026      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x498>
 8001f42:	e01e      	b.n	8001f82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e019      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40007000 	.word	0x40007000
 8001f58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_RCC_OscConfig+0x500>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0d0      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d910      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b67      	ldr	r3, [pc, #412]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4965      	ldr	r1, [pc, #404]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800200e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d040      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b41      	ldr	r3, [pc, #260]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e073      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3d      	ldr	r3, [pc, #244]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06b      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b39      	ldr	r3, [pc, #228]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4936      	ldr	r1, [pc, #216]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7fe fcb6 	bl	80009f0 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe fcb2 	bl	80009f0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e053      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d210      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4922      	ldr	r1, [pc, #136]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490a      	ldr	r1, [pc, #40]	@ (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_RCC_ClockConfig+0x1cc>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1d0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fc14 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
 8002158:	08005efc 	.word	0x08005efc
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800217e:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d002      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x30>
 800218e:	2b08      	cmp	r3, #8
 8002190:	d003      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x36>
 8002192:	e027      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002196:	613b      	str	r3, [r7, #16]
      break;
 8002198:	e027      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0c9b      	lsrs	r3, r3, #18
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	4a17      	ldr	r2, [pc, #92]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d010      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0c5b      	lsrs	r3, r3, #17
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	4a11      	ldr	r2, [pc, #68]	@ (8002204 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x98>)
 80021c6:	fb03 f202 	mul.w	r2, r3, r2
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e004      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	613b      	str	r3, [r7, #16]
      break;
 80021e2:	e002      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x98>)
 80021e6:	613b      	str	r3, [r7, #16]
      break;
 80021e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ea:	693b      	ldr	r3, [r7, #16]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	08005f14 	.word	0x08005f14
 8002204:	08005f24 	.word	0x08005f24
 8002208:	003d0900 	.word	0x003d0900

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b02      	ldr	r3, [pc, #8]	@ (800221c <HAL_RCC_GetHCLKFreq+0x10>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000000 	.word	0x20000000

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002224:	f7ff fff2 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08005f0c 	.word	0x08005f0c

08002248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800224c:	f7ff ffde 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0adb      	lsrs	r3, r3, #11
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	@ (800226c <HAL_RCC_GetPCLK2Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08005f0c 	.word	0x08005f0c

08002270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002278:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <RCC_Delay+0x34>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <RCC_Delay+0x38>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0a5b      	lsrs	r3, r3, #9
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800228c:	bf00      	nop
  }
  while (Delay --);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1e5a      	subs	r2, r3, #1
 8002292:	60fa      	str	r2, [r7, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f9      	bne.n	800228c <RCC_Delay+0x1c>
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	20000000 	.word	0x20000000
 80022a8:	10624dd3 	.word	0x10624dd3

080022ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e076      	b.n	80023ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ce:	d009      	beq.n	80022e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
 80022d6:	e005      	b.n	80022e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe f98a 	bl	8000618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800231a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002368:	ea42 0103 	orr.w	r1, r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	0c1a      	lsrs	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f002 0204 	and.w	r2, r2, #4
 800238a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800239a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023c4:	f7fe fb14 	bl	80009f0 <HAL_GetTick>
 80023c8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
 80023dc:	e12a      	b.n	8002634 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_Transmit+0x36>
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e122      	b.n	8002634 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_SPI_Transmit+0x48>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e11b      	b.n	8002634 <HAL_SPI_Transmit+0x280>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2203      	movs	r2, #3
 8002408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800244a:	d10f      	bne.n	800246c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800245a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800246a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002476:	2b40      	cmp	r3, #64	@ 0x40
 8002478:	d007      	beq.n	800248a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002492:	d152      	bne.n	800253a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_SPI_Transmit+0xee>
 800249c:	8b7b      	ldrh	r3, [r7, #26]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d145      	bne.n	800252e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	881a      	ldrh	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	1c9a      	adds	r2, r3, #2
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024c6:	e032      	b.n	800252e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d112      	bne.n	80024fc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	881a      	ldrh	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	1c9a      	adds	r2, r3, #2
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024fa:	e018      	b.n	800252e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024fc:	f7fe fa78 	bl	80009f0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d803      	bhi.n	8002514 <HAL_SPI_Transmit+0x160>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d102      	bne.n	800251a <HAL_SPI_Transmit+0x166>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e082      	b.n	8002634 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1c7      	bne.n	80024c8 <HAL_SPI_Transmit+0x114>
 8002538:	e053      	b.n	80025e2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_SPI_Transmit+0x194>
 8002542:	8b7b      	ldrh	r3, [r7, #26]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d147      	bne.n	80025d8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	330c      	adds	r3, #12
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800256e:	e033      	b.n	80025d8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d113      	bne.n	80025a6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025a4:	e018      	b.n	80025d8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a6:	f7fe fa23 	bl	80009f0 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d803      	bhi.n	80025be <HAL_SPI_Transmit+0x20a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d102      	bne.n	80025c4 <HAL_SPI_Transmit+0x210>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e02d      	b.n	8002634 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1c6      	bne.n	8002570 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f8b0 	bl	800274c <SPI_EndRxTxTransaction>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002632:	2300      	movs	r3, #0
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800264c:	f7fe f9d0 	bl	80009f0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	4413      	add	r3, r2
 800265a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800265c:	f7fe f9c8 	bl	80009f0 <HAL_GetTick>
 8002660:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	015b      	lsls	r3, r3, #5
 8002668:	0d1b      	lsrs	r3, r3, #20
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002672:	e054      	b.n	800271e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d050      	beq.n	800271e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800267c:	f7fe f9b8 	bl	80009f0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	429a      	cmp	r2, r3
 800268a:	d902      	bls.n	8002692 <SPI_WaitFlagStateUntilTimeout+0x56>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d13d      	bne.n	800270e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026aa:	d111      	bne.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b4:	d004      	beq.n	80026c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026be:	d107      	bne.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d8:	d10f      	bne.n	80026fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e017      	b.n	800273e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3b01      	subs	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	429a      	cmp	r2, r3
 800273a:	d19b      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000000 	.word	0x20000000

0800274c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2201      	movs	r2, #1
 8002760:	2102      	movs	r1, #2
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff ff6a 	bl	800263c <SPI_WaitFlagStateUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e013      	b.n	80027a6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	@ 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff ff57 	bl	800263c <SPI_WaitFlagStateUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e000      	b.n	80027a6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e042      	b.n	8002846 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7fd ff5d 	bl	8000694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	@ 0x24
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fcd4 	bl	80031a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002806:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002816:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002826:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	d112      	bne.n	800288e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_UART_Receive_IT+0x26>
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e00b      	b.n	8002890 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	461a      	mov	r2, r3
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fab6 	bl	8002df6 <UART_Start_Receive_IT>
 800288a:	4603      	mov	r3, r0
 800288c:	e000      	b.n	8002890 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0ba      	sub	sp, #232	@ 0xe8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_UART_IRQHandler+0x66>
 80028ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fb93 	bl	8003022 <UART_Receive_IT>
      return;
 80028fc:	e25b      	b.n	8002db6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80de 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x22c>
 8002908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002918:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80d1 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_UART_IRQHandler+0xae>
 800292e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_UART_IRQHandler+0xd2>
 8002952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f043 0202 	orr.w	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800296a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_UART_IRQHandler+0xf6>
 8002976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d011      	beq.n	80029be <HAL_UART_IRQHandler+0x126>
 800299a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f043 0208 	orr.w	r2, r3, #8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 81f2 	beq.w	8002dac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_UART_IRQHandler+0x14e>
 80029d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fb1e 	bl	8003022 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <HAL_UART_IRQHandler+0x17a>
 8002a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04f      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa28 	bl	8002e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d041      	beq.n	8002aaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1d9      	bne.n	8002a26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d013      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c78 <HAL_UART_IRQHandler+0x3e0>)
 8002a80:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe f928 	bl	8000cdc <HAL_DMA_Abort_IT>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa0:	e00e      	b.n	8002ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f993 	bl	8002dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa8:	e00a      	b.n	8002ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f98f 	bl	8002dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	e006      	b.n	8002ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f98b 	bl	8002dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002abe:	e175      	b.n	8002dac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	bf00      	nop
    return;
 8002ac2:	e173      	b.n	8002dac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	f040 814f 	bne.w	8002d6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8148 	beq.w	8002d6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8141 	beq.w	8002d6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80b6 	beq.w	8002c7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8145 	beq.w	8002db0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	f080 813e 	bcs.w	8002db0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	f000 8088 	beq.w	8002c58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b56:	e853 3f00 	ldrex	r3, [r3]
 8002b5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b74:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b80:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b84:	e841 2300 	strex	r3, r2, [r1]
 8002b88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1d9      	bne.n	8002b48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3314      	adds	r3, #20
 8002b9a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b9e:	e853 3f00 	ldrex	r3, [r3]
 8002ba2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bb8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e1      	bne.n	8002b94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3314      	adds	r3, #20
 8002bd6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bf4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bfa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e3      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c28:	f023 0310 	bic.w	r3, r3, #16
 8002c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c3c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e3      	bne.n	8002c16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe f807 	bl	8000c66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8b6 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c74:	e09c      	b.n	8002db0 <HAL_UART_IRQHandler+0x518>
 8002c76:	bf00      	nop
 8002c78:	08002f2d 	.word	0x08002f2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 808e 	beq.w	8002db4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8089 	beq.w	8002db4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e3      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3314      	adds	r3, #20
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3314      	adds	r3, #20
 8002cfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d06:	e841 2300 	strex	r3, r2, [r1]
 8002d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1e3      	bne.n	8002cda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0310 	bic.w	r3, r3, #16
 8002d36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d44:	61fa      	str	r2, [r7, #28]
 8002d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	69b9      	ldr	r1, [r7, #24]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	617b      	str	r3, [r7, #20]
   return(result);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e3      	bne.n	8002d20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f83b 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d6a:	e023      	b.n	8002db4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <HAL_UART_IRQHandler+0x4f4>
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f8e5 	bl	8002f54 <UART_Transmit_IT>
    return;
 8002d8a:	e014      	b.n	8002db6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <HAL_UART_IRQHandler+0x51e>
 8002d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f924 	bl	8002ff2 <UART_EndTransmit_IT>
    return;
 8002daa:	e004      	b.n	8002db6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002dac:	bf00      	nop
 8002dae:	e002      	b.n	8002db6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002db4:	bf00      	nop
  }
}
 8002db6:	37e8      	adds	r7, #232	@ 0xe8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2222      	movs	r2, #34	@ 0x22
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0220 	orr.w	r2, r2, #32
 8002e5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b095      	sub	sp, #84	@ 0x54
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e90:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e5      	bne.n	8002ea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d119      	bne.n	8002f14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f00:	61ba      	str	r2, [r7, #24]
 8002f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6979      	ldr	r1, [r7, #20]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e5      	bne.n	8002ee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f22:	bf00      	nop
 8002f24:	3754      	adds	r7, #84	@ 0x54
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff ff41 	bl	8002dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b21      	cmp	r3, #33	@ 0x21
 8002f66:	d13e      	bne.n	8002fe6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f70:	d114      	bne.n	8002f9c <UART_Transmit_IT+0x48>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d110      	bne.n	8002f9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	1c9a      	adds	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	621a      	str	r2, [r3, #32]
 8002f9a:	e008      	b.n	8002fae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	1c59      	adds	r1, r3, #1
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6211      	str	r1, [r2, #32]
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fe0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003008:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fed2 	bl	8002dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b08c      	sub	sp, #48	@ 0x30
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b22      	cmp	r3, #34	@ 0x22
 8003034:	f040 80ae 	bne.w	8003194 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003040:	d117      	bne.n	8003072 <UART_Receive_IT+0x50>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d113      	bne.n	8003072 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003060:	b29a      	uxth	r2, r3
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	1c9a      	adds	r2, r3, #2
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003070:	e026      	b.n	80030c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003084:	d007      	beq.n	8003096 <UART_Receive_IT+0x74>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <UART_Receive_IT+0x82>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e008      	b.n	80030b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4619      	mov	r1, r3
 80030ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d15d      	bne.n	8003190 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0220 	bic.w	r2, r2, #32
 80030e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	2b01      	cmp	r3, #1
 8003118:	d135      	bne.n	8003186 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	613b      	str	r3, [r7, #16]
   return(result);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f023 0310 	bic.w	r3, r3, #16
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003140:	623a      	str	r2, [r7, #32]
 8003142:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	69f9      	ldr	r1, [r7, #28]
 8003146:	6a3a      	ldr	r2, [r7, #32]
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	61bb      	str	r3, [r7, #24]
   return(result);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b10      	cmp	r3, #16
 8003160:	d10a      	bne.n	8003178 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fe2e 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
 8003184:	e002      	b.n	800318c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd f9a2 	bl	80004d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e002      	b.n	8003196 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3730      	adds	r7, #48	@ 0x30
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031da:	f023 030c 	bic.w	r3, r3, #12
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <UART_SetConfig+0x114>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d103      	bne.n	8003210 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff f81e 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	e002      	b.n	8003216 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff f806 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003214:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <UART_SetConfig+0x118>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	0119      	lsls	r1, r3, #4
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <UART_SetConfig+0x118>)
 800324e:	fba3 0302 	umull	r0, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2064      	movs	r0, #100	@ 0x64
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	3332      	adds	r3, #50	@ 0x32
 8003260:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <UART_SetConfig+0x118>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800326c:	4419      	add	r1, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <UART_SetConfig+0x118>)
 8003286:	fba3 0302 	umull	r0, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2064      	movs	r0, #100	@ 0x64
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	@ 0x32
 8003298:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <UART_SetConfig+0x118>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	440a      	add	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40013800 	.word	0x40013800
 80032b8:	51eb851f 	.word	0x51eb851f

080032bc <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f1xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80032c6:	1df9      	adds	r1, r7, #7
 80032c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032cc:	2201      	movs	r2, #1
 80032ce:	4803      	ldr	r0, [pc, #12]	@ (80032dc <DEV_SPI_WriteByte+0x20>)
 80032d0:	f7ff f870 	bl	80023b4 <HAL_SPI_Transmit>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000100 	.word	0x20000100

080032e0 <DEV_Module_Init>:
	DEV_Digital_Write(EPD_CS_PIN, 1);
	return j;
}

int DEV_Module_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2104      	movs	r1, #4
 80032e8:	480a      	ldr	r0, [pc, #40]	@ (8003314 <DEV_Module_Init+0x34>)
 80032ea:	f7fd ff0a 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2108      	movs	r1, #8
 80032f2:	4808      	ldr	r0, [pc, #32]	@ (8003314 <DEV_Module_Init+0x34>)
 80032f4:	f7fd ff05 	bl	8001102 <HAL_GPIO_WritePin>
	DEV_Digital_Write(EPD_PWR_PIN, 1);
 80032f8:	2201      	movs	r2, #1
 80032fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032fe:	4805      	ldr	r0, [pc, #20]	@ (8003314 <DEV_Module_Init+0x34>)
 8003300:	f7fd feff 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003304:	2201      	movs	r2, #1
 8003306:	2102      	movs	r1, #2
 8003308:	4802      	ldr	r0, [pc, #8]	@ (8003314 <DEV_Module_Init+0x34>)
 800330a:	f7fd fefa 	bl	8001102 <HAL_GPIO_WritePin>
    return 0;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40010800 	.word	0x40010800

08003318 <EPD_2IN9BC_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
void EPD_2IN9BC_Reset(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800331c:	2201      	movs	r2, #1
 800331e:	2102      	movs	r1, #2
 8003320:	480b      	ldr	r0, [pc, #44]	@ (8003350 <EPD_2IN9BC_Reset+0x38>)
 8003322:	f7fd feee 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8003326:	20c8      	movs	r0, #200	@ 0xc8
 8003328:	f7fd fb6c 	bl	8000a04 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800332c:	2200      	movs	r2, #0
 800332e:	2102      	movs	r1, #2
 8003330:	4807      	ldr	r0, [pc, #28]	@ (8003350 <EPD_2IN9BC_Reset+0x38>)
 8003332:	f7fd fee6 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);
 8003336:	2001      	movs	r0, #1
 8003338:	f7fd fb64 	bl	8000a04 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800333c:	2201      	movs	r2, #1
 800333e:	2102      	movs	r1, #2
 8003340:	4803      	ldr	r0, [pc, #12]	@ (8003350 <EPD_2IN9BC_Reset+0x38>)
 8003342:	f7fd fede 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8003346:	20c8      	movs	r0, #200	@ 0xc8
 8003348:	f7fd fb5c 	bl	8000a04 <HAL_Delay>
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40010800 	.word	0x40010800

08003354 <EPD_2IN9BC_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
void EPD_2IN9BC_SendCommand(UBYTE Reg)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	2104      	movs	r1, #4
 8003362:	480a      	ldr	r0, [pc, #40]	@ (800338c <EPD_2IN9BC_SendCommand+0x38>)
 8003364:	f7fd fecd 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003368:	2200      	movs	r2, #0
 800336a:	2108      	movs	r1, #8
 800336c:	4807      	ldr	r0, [pc, #28]	@ (800338c <EPD_2IN9BC_SendCommand+0x38>)
 800336e:	f7fd fec8 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ffa1 	bl	80032bc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800337a:	2201      	movs	r2, #1
 800337c:	2108      	movs	r1, #8
 800337e:	4803      	ldr	r0, [pc, #12]	@ (800338c <EPD_2IN9BC_SendCommand+0x38>)
 8003380:	f7fd febf 	bl	8001102 <HAL_GPIO_WritePin>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40010800 	.word	0x40010800

08003390 <EPD_2IN9BC_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
void EPD_2IN9BC_SendData(UBYTE Data)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800339a:	2201      	movs	r2, #1
 800339c:	2104      	movs	r1, #4
 800339e:	480a      	ldr	r0, [pc, #40]	@ (80033c8 <EPD_2IN9BC_SendData+0x38>)
 80033a0:	f7fd feaf 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2108      	movs	r1, #8
 80033a8:	4807      	ldr	r0, [pc, #28]	@ (80033c8 <EPD_2IN9BC_SendData+0x38>)
 80033aa:	f7fd feaa 	bl	8001102 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff83 	bl	80032bc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80033b6:	2201      	movs	r2, #1
 80033b8:	2108      	movs	r1, #8
 80033ba:	4803      	ldr	r0, [pc, #12]	@ (80033c8 <EPD_2IN9BC_SendData+0x38>)
 80033bc:	f7fd fea1 	bl	8001102 <HAL_GPIO_WritePin>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40010800 	.word	0x40010800

080033cc <EPD_2IN9BC_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9BC_ReadBusy(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 80033d0:	4809      	ldr	r0, [pc, #36]	@ (80033f8 <EPD_2IN9BC_ReadBusy+0x2c>)
 80033d2:	f001 fd83 	bl	8004edc <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {      //LOW: idle, HIGH: busy
 80033d6:	e002      	b.n	80033de <EPD_2IN9BC_ReadBusy+0x12>
        DEV_Delay_ms(100);
 80033d8:	2064      	movs	r0, #100	@ 0x64
 80033da:	f7fd fb13 	bl	8000a04 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {      //LOW: idle, HIGH: busy
 80033de:	2101      	movs	r1, #1
 80033e0:	4806      	ldr	r0, [pc, #24]	@ (80033fc <EPD_2IN9BC_ReadBusy+0x30>)
 80033e2:	f7fd fe77 	bl	80010d4 <HAL_GPIO_ReadPin>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f5      	beq.n	80033d8 <EPD_2IN9BC_ReadBusy+0xc>
    }
    Debug("e-Paper busy release\r\n");
 80033ec:	4804      	ldr	r0, [pc, #16]	@ (8003400 <EPD_2IN9BC_ReadBusy+0x34>)
 80033ee:	f001 fd75 	bl	8004edc <puts>
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	08005a74 	.word	0x08005a74
 80033fc:	40010800 	.word	0x40010800
 8003400:	08005a8c 	.word	0x08005a8c

08003404 <EPD_2IN9BC_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9BC_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
    EPD_2IN9BC_Reset();
 8003408:	f7ff ff86 	bl	8003318 <EPD_2IN9BC_Reset>

    EPD_2IN9BC_SendCommand(0x06); // BOOSTER_SOFT_START
 800340c:	2006      	movs	r0, #6
 800340e:	f7ff ffa1 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_SendData(0x17);
 8003412:	2017      	movs	r0, #23
 8003414:	f7ff ffbc 	bl	8003390 <EPD_2IN9BC_SendData>
    EPD_2IN9BC_SendData(0x17);
 8003418:	2017      	movs	r0, #23
 800341a:	f7ff ffb9 	bl	8003390 <EPD_2IN9BC_SendData>
    EPD_2IN9BC_SendData(0x17);
 800341e:	2017      	movs	r0, #23
 8003420:	f7ff ffb6 	bl	8003390 <EPD_2IN9BC_SendData>
	
    EPD_2IN9BC_SendCommand(0x04); // POWER_ON
 8003424:	2004      	movs	r0, #4
 8003426:	f7ff ff95 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_ReadBusy();
 800342a:	f7ff ffcf 	bl	80033cc <EPD_2IN9BC_ReadBusy>
	
    EPD_2IN9BC_SendCommand(0x00); // PANEL_SETTING
 800342e:	2000      	movs	r0, #0
 8003430:	f7ff ff90 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_SendData(0x8F);
 8003434:	208f      	movs	r0, #143	@ 0x8f
 8003436:	f7ff ffab 	bl	8003390 <EPD_2IN9BC_SendData>
	
    EPD_2IN9BC_SendCommand(0x50); // VCOM_AND_DATA_INTERVAL_SETTING
 800343a:	2050      	movs	r0, #80	@ 0x50
 800343c:	f7ff ff8a 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_SendData(0x77);
 8003440:	2077      	movs	r0, #119	@ 0x77
 8003442:	f7ff ffa5 	bl	8003390 <EPD_2IN9BC_SendData>
	
    EPD_2IN9BC_SendCommand(0x61); // TCON_RESOLUTION
 8003446:	2061      	movs	r0, #97	@ 0x61
 8003448:	f7ff ff84 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_SendData(0x80);
 800344c:	2080      	movs	r0, #128	@ 0x80
 800344e:	f7ff ff9f 	bl	8003390 <EPD_2IN9BC_SendData>
    EPD_2IN9BC_SendData(0x01);
 8003452:	2001      	movs	r0, #1
 8003454:	f7ff ff9c 	bl	8003390 <EPD_2IN9BC_SendData>
    EPD_2IN9BC_SendData(0x28);
 8003458:	2028      	movs	r0, #40	@ 0x28
 800345a:	f7ff ff99 	bl	8003390 <EPD_2IN9BC_SendData>
	
    EPD_2IN9BC_SendCommand(0x82); // VCM_DC_SETTING_REGISTER
 800345e:	2082      	movs	r0, #130	@ 0x82
 8003460:	f7ff ff78 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_SendData(0X0A);
 8003464:	200a      	movs	r0, #10
 8003466:	f7ff ff93 	bl	8003390 <EPD_2IN9BC_SendData>
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}

0800346e <EPD_2IN9BC_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9BC_Clear(void)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
    UWORD Width = (EPD_2IN9BC_WIDTH % 8 == 0)? (EPD_2IN9BC_WIDTH / 8 ): (EPD_2IN9BC_WIDTH / 8 + 1);
 8003474:	2310      	movs	r3, #16
 8003476:	80fb      	strh	r3, [r7, #6]
    UWORD Height = EPD_2IN9BC_HEIGHT;
 8003478:	f44f 7394 	mov.w	r3, #296	@ 0x128
 800347c:	80bb      	strh	r3, [r7, #4]

    //send black data
    EPD_2IN9BC_SendCommand(0x10);
 800347e:	2010      	movs	r0, #16
 8003480:	f7ff ff68 	bl	8003354 <EPD_2IN9BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8003484:	2300      	movs	r3, #0
 8003486:	81fb      	strh	r3, [r7, #14]
 8003488:	e00f      	b.n	80034aa <EPD_2IN9BC_Clear+0x3c>
        for (UWORD i = 0; i < Width; i++) {
 800348a:	2300      	movs	r3, #0
 800348c:	81bb      	strh	r3, [r7, #12]
 800348e:	e005      	b.n	800349c <EPD_2IN9BC_Clear+0x2e>
            EPD_2IN9BC_SendData(0xFF);
 8003490:	20ff      	movs	r0, #255	@ 0xff
 8003492:	f7ff ff7d 	bl	8003390 <EPD_2IN9BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8003496:	89bb      	ldrh	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	81bb      	strh	r3, [r7, #12]
 800349c:	89ba      	ldrh	r2, [r7, #12]
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d3f5      	bcc.n	8003490 <EPD_2IN9BC_Clear+0x22>
    for (UWORD j = 0; j < Height; j++) {
 80034a4:	89fb      	ldrh	r3, [r7, #14]
 80034a6:	3301      	adds	r3, #1
 80034a8:	81fb      	strh	r3, [r7, #14]
 80034aa:	89fa      	ldrh	r2, [r7, #14]
 80034ac:	88bb      	ldrh	r3, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d3eb      	bcc.n	800348a <EPD_2IN9BC_Clear+0x1c>
        }
    }

    //send red data
    EPD_2IN9BC_SendCommand(0x13);
 80034b2:	2013      	movs	r0, #19
 80034b4:	f7ff ff4e 	bl	8003354 <EPD_2IN9BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80034b8:	2300      	movs	r3, #0
 80034ba:	817b      	strh	r3, [r7, #10]
 80034bc:	e00f      	b.n	80034de <EPD_2IN9BC_Clear+0x70>
        for (UWORD i = 0; i < Width; i++) {
 80034be:	2300      	movs	r3, #0
 80034c0:	813b      	strh	r3, [r7, #8]
 80034c2:	e005      	b.n	80034d0 <EPD_2IN9BC_Clear+0x62>
            EPD_2IN9BC_SendData(0xFF);
 80034c4:	20ff      	movs	r0, #255	@ 0xff
 80034c6:	f7ff ff63 	bl	8003390 <EPD_2IN9BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80034ca:	893b      	ldrh	r3, [r7, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	813b      	strh	r3, [r7, #8]
 80034d0:	893a      	ldrh	r2, [r7, #8]
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3f5      	bcc.n	80034c4 <EPD_2IN9BC_Clear+0x56>
    for (UWORD j = 0; j < Height; j++) {
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	3301      	adds	r3, #1
 80034dc:	817b      	strh	r3, [r7, #10]
 80034de:	897a      	ldrh	r2, [r7, #10]
 80034e0:	88bb      	ldrh	r3, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3eb      	bcc.n	80034be <EPD_2IN9BC_Clear+0x50>
        }
    }
		
    EPD_2IN9BC_SendCommand(0x12);
 80034e6:	2012      	movs	r0, #18
 80034e8:	f7ff ff34 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_ReadBusy();
 80034ec:	f7ff ff6e 	bl	80033cc <EPD_2IN9BC_ReadBusy>
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <EPD_2IN9BC_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN9BC_Display(const UBYTE *blackimage, const UBYTE *ryimage)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    UWORD Width, Height;
    Width = (EPD_2IN9BC_WIDTH % 8 == 0)? (EPD_2IN9BC_WIDTH / 8 ): (EPD_2IN9BC_WIDTH / 8 + 1);
 8003502:	2310      	movs	r3, #16
 8003504:	81fb      	strh	r3, [r7, #14]
    Height = EPD_2IN9BC_HEIGHT;
 8003506:	f44f 7394 	mov.w	r3, #296	@ 0x128
 800350a:	81bb      	strh	r3, [r7, #12]

    EPD_2IN9BC_SendCommand(0x10);
 800350c:	2010      	movs	r0, #16
 800350e:	f7ff ff21 	bl	8003354 <EPD_2IN9BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8003512:	2300      	movs	r3, #0
 8003514:	82fb      	strh	r3, [r7, #22]
 8003516:	e019      	b.n	800354c <EPD_2IN9BC_Display+0x54>
        for (UWORD i = 0; i < Width; i++) {
 8003518:	2300      	movs	r3, #0
 800351a:	82bb      	strh	r3, [r7, #20]
 800351c:	e00f      	b.n	800353e <EPD_2IN9BC_Display+0x46>
            EPD_2IN9BC_SendData(blackimage[i + j * Width]);
 800351e:	8aba      	ldrh	r2, [r7, #20]
 8003520:	8afb      	ldrh	r3, [r7, #22]
 8003522:	89f9      	ldrh	r1, [r7, #14]
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff2c 	bl	8003390 <EPD_2IN9BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8003538:	8abb      	ldrh	r3, [r7, #20]
 800353a:	3301      	adds	r3, #1
 800353c:	82bb      	strh	r3, [r7, #20]
 800353e:	8aba      	ldrh	r2, [r7, #20]
 8003540:	89fb      	ldrh	r3, [r7, #14]
 8003542:	429a      	cmp	r2, r3
 8003544:	d3eb      	bcc.n	800351e <EPD_2IN9BC_Display+0x26>
    for (UWORD j = 0; j < Height; j++) {
 8003546:	8afb      	ldrh	r3, [r7, #22]
 8003548:	3301      	adds	r3, #1
 800354a:	82fb      	strh	r3, [r7, #22]
 800354c:	8afa      	ldrh	r2, [r7, #22]
 800354e:	89bb      	ldrh	r3, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d3e1      	bcc.n	8003518 <EPD_2IN9BC_Display+0x20>
        }
    }
    EPD_2IN9BC_SendCommand(0x92);
 8003554:	2092      	movs	r0, #146	@ 0x92
 8003556:	f7ff fefd 	bl	8003354 <EPD_2IN9BC_SendCommand>
    
    EPD_2IN9BC_SendCommand(0x13);
 800355a:	2013      	movs	r0, #19
 800355c:	f7ff fefa 	bl	8003354 <EPD_2IN9BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8003560:	2300      	movs	r3, #0
 8003562:	827b      	strh	r3, [r7, #18]
 8003564:	e019      	b.n	800359a <EPD_2IN9BC_Display+0xa2>
        for (UWORD i = 0; i < Width; i++) {
 8003566:	2300      	movs	r3, #0
 8003568:	823b      	strh	r3, [r7, #16]
 800356a:	e00f      	b.n	800358c <EPD_2IN9BC_Display+0x94>
            EPD_2IN9BC_SendData(ryimage[i + j * Width]);
 800356c:	8a3a      	ldrh	r2, [r7, #16]
 800356e:	8a7b      	ldrh	r3, [r7, #18]
 8003570:	89f9      	ldrh	r1, [r7, #14]
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	461a      	mov	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	4413      	add	r3, r2
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff05 	bl	8003390 <EPD_2IN9BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8003586:	8a3b      	ldrh	r3, [r7, #16]
 8003588:	3301      	adds	r3, #1
 800358a:	823b      	strh	r3, [r7, #16]
 800358c:	8a3a      	ldrh	r2, [r7, #16]
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	429a      	cmp	r2, r3
 8003592:	d3eb      	bcc.n	800356c <EPD_2IN9BC_Display+0x74>
    for (UWORD j = 0; j < Height; j++) {
 8003594:	8a7b      	ldrh	r3, [r7, #18]
 8003596:	3301      	adds	r3, #1
 8003598:	827b      	strh	r3, [r7, #18]
 800359a:	8a7a      	ldrh	r2, [r7, #18]
 800359c:	89bb      	ldrh	r3, [r7, #12]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3e1      	bcc.n	8003566 <EPD_2IN9BC_Display+0x6e>
        }
    }
    EPD_2IN9BC_SendCommand(0x92);
 80035a2:	2092      	movs	r0, #146	@ 0x92
 80035a4:	f7ff fed6 	bl	8003354 <EPD_2IN9BC_SendCommand>

    EPD_2IN9BC_SendCommand(0x12);
 80035a8:	2012      	movs	r0, #18
 80035aa:	f7ff fed3 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_ReadBusy();
 80035ae:	f7ff ff0d 	bl	80033cc <EPD_2IN9BC_ReadBusy>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <EPD_2IN9BC_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN9BC_Sleep(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
    EPD_2IN9BC_SendCommand(0x02); // POWER_OFF
 80035be:	2002      	movs	r0, #2
 80035c0:	f7ff fec8 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_ReadBusy();
 80035c4:	f7ff ff02 	bl	80033cc <EPD_2IN9BC_ReadBusy>
    EPD_2IN9BC_SendCommand(0x07); // DEEP_SLEEP
 80035c8:	2007      	movs	r0, #7
 80035ca:	f7ff fec3 	bl	8003354 <EPD_2IN9BC_SendCommand>
    EPD_2IN9BC_SendData(0xA5); // check code
 80035ce:	20a5      	movs	r0, #165	@ 0xa5
 80035d0:	f7ff fede 	bl	8003390 <EPD_2IN9BC_SendData>
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <EPD_test>:
******************************************************************************/
#include "EPD_Test.h"
#include "EPD_2IN9BC.h"
int test_bug = 0;
int EPD_test(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af04      	add	r7, sp, #16
    printf("EPD_2IN9BC_test Demo\r\n");
 80035de:	48b7      	ldr	r0, [pc, #732]	@ (80038bc <EPD_test+0x2e4>)
 80035e0:	f001 fc7c 	bl	8004edc <puts>
    DEV_Module_Init();
 80035e4:	f7ff fe7c 	bl	80032e0 <DEV_Module_Init>

    printf("e-Paper Init and Clear...\r\n");
 80035e8:	48b5      	ldr	r0, [pc, #724]	@ (80038c0 <EPD_test+0x2e8>)
 80035ea:	f001 fc77 	bl	8004edc <puts>
    EPD_2IN9BC_Init();
 80035ee:	f7ff ff09 	bl	8003404 <EPD_2IN9BC_Init>
    EPD_2IN9BC_Clear();
 80035f2:	f7ff ff3c 	bl	800346e <EPD_2IN9BC_Clear>
    DEV_Delay_ms(500);
 80035f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035fa:	f7fd fa03 	bl	8000a04 <HAL_Delay>

    //Create a new image cache named IMAGE_BW and fill it with white
    UBYTE *BlackImage, *RYImage; // Red or Yellow
    UWORD Imagesize = ((EPD_2IN9BC_WIDTH % 8 == 0)? (EPD_2IN9BC_WIDTH / 8 ): (EPD_2IN9BC_WIDTH / 8 + 1)) * EPD_2IN9BC_HEIGHT;
 80035fe:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8003602:	817b      	strh	r3, [r7, #10]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8003604:	897b      	ldrh	r3, [r7, #10]
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fa88 	bl	8004b1c <malloc>
 800360c:	4603      	mov	r3, r0
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <EPD_test+0x4a>
        printf("Failed to apply for black memory...\r\n");
 8003616:	48ab      	ldr	r0, [pc, #684]	@ (80038c4 <EPD_test+0x2ec>)
 8003618:	f001 fc60 	bl	8004edc <puts>
        return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	e147      	b.n	80038b2 <EPD_test+0x2da>
    }
    if((RYImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fa79 	bl	8004b1c <malloc>
 800362a:	4603      	mov	r3, r0
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <EPD_test+0x68>
        printf("Failed to apply for red memory...\r\n");
 8003634:	48a4      	ldr	r0, [pc, #656]	@ (80038c8 <EPD_test+0x2f0>)
 8003636:	f001 fc51 	bl	8004edc <puts>
        return -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	e138      	b.n	80038b2 <EPD_test+0x2da>
    }
    printf("NewImage:BlackImage and RYImage\r\n");
 8003640:	48a2      	ldr	r0, [pc, #648]	@ (80038cc <EPD_test+0x2f4>)
 8003642:	f001 fc4b 	bl	8004edc <puts>
    Paint_NewImage(BlackImage, EPD_2IN9BC_WIDTH, EPD_2IN9BC_HEIGHT, 270, WHITE);
 8003646:	23ff      	movs	r3, #255	@ 0xff
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800364e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8003652:	2180      	movs	r1, #128	@ 0x80
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f953 	bl	8003900 <Paint_NewImage>
    Paint_NewImage(RYImage, EPD_2IN9BC_WIDTH, EPD_2IN9BC_HEIGHT, 270, WHITE);
 800365a:	23ff      	movs	r3, #255	@ 0xff
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8003662:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8003666:	2180      	movs	r1, #128	@ 0x80
 8003668:	6838      	ldr	r0, [r7, #0]
 800366a:	f000 f949 	bl	8003900 <Paint_NewImage>

    //Select Image
    Paint_SelectImage(BlackImage);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f99a 	bl	80039a8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8003674:	20ff      	movs	r0, #255	@ 0xff
 8003676:	f000 faf5 	bl	8003c64 <Paint_Clear>
    Paint_SelectImage(RYImage);
 800367a:	6838      	ldr	r0, [r7, #0]
 800367c:	f000 f994 	bl	80039a8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8003680:	20ff      	movs	r0, #255	@ 0xff
 8003682:	f000 faef 	bl	8003c64 <Paint_Clear>
#endif
*/
#if 1   // Drawing on the image
    /*Horizontal screen*/
    //1.Draw black image
    Paint_SelectImage(BlackImage);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f98e 	bl	80039a8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800368c:	20ff      	movs	r0, #255	@ 0xff
 800368e:	f000 fae9 	bl	8003c64 <Paint_Clear>
    Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8003692:	2301      	movs	r3, #1
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2301      	movs	r3, #1
 8003698:	2200      	movs	r2, #0
 800369a:	2150      	movs	r1, #80	@ 0x50
 800369c:	200a      	movs	r0, #10
 800369e:	f000 fb85 	bl	8003dac <Paint_DrawPoint>
    Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 80036a2:	2301      	movs	r3, #1
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	2302      	movs	r3, #2
 80036a8:	2200      	movs	r2, #0
 80036aa:	215a      	movs	r1, #90	@ 0x5a
 80036ac:	200a      	movs	r0, #10
 80036ae:	f000 fb7d 	bl	8003dac <Paint_DrawPoint>
    Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 80036b2:	2301      	movs	r3, #1
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2303      	movs	r3, #3
 80036b8:	2200      	movs	r2, #0
 80036ba:	2164      	movs	r1, #100	@ 0x64
 80036bc:	200a      	movs	r0, #10
 80036be:	f000 fb75 	bl	8003dac <Paint_DrawPoint>
    Paint_DrawPoint(10, 110, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 80036c2:	2301      	movs	r3, #1
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2303      	movs	r3, #3
 80036c8:	2200      	movs	r2, #0
 80036ca:	216e      	movs	r1, #110	@ 0x6e
 80036cc:	200a      	movs	r0, #10
 80036ce:	f000 fb6d 	bl	8003dac <Paint_DrawPoint>
    Paint_DrawLine(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80036d2:	2300      	movs	r3, #0
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	2301      	movs	r3, #1
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	2300      	movs	r3, #0
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2378      	movs	r3, #120	@ 0x78
 80036e0:	2246      	movs	r2, #70	@ 0x46
 80036e2:	2146      	movs	r1, #70	@ 0x46
 80036e4:	2014      	movs	r0, #20
 80036e6:	f000 fc0d 	bl	8003f04 <Paint_DrawLine>
    Paint_DrawLine(70, 70, 20, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80036ea:	2300      	movs	r3, #0
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	2301      	movs	r3, #1
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2378      	movs	r3, #120	@ 0x78
 80036f8:	2214      	movs	r2, #20
 80036fa:	2146      	movs	r1, #70	@ 0x46
 80036fc:	2046      	movs	r0, #70	@ 0x46
 80036fe:	f000 fc01 	bl	8003f04 <Paint_DrawLine>
    Paint_DrawRectangle(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8003702:	2300      	movs	r3, #0
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	2301      	movs	r3, #1
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2378      	movs	r3, #120	@ 0x78
 8003710:	2246      	movs	r2, #70	@ 0x46
 8003712:	2146      	movs	r1, #70	@ 0x46
 8003714:	2014      	movs	r0, #20
 8003716:	f000 fca1 	bl	800405c <Paint_DrawRectangle>
    Paint_DrawRectangle(80, 70, 130, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800371a:	2301      	movs	r3, #1
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	2301      	movs	r3, #1
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2300      	movs	r3, #0
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2378      	movs	r3, #120	@ 0x78
 8003728:	2282      	movs	r2, #130	@ 0x82
 800372a:	2146      	movs	r1, #70	@ 0x46
 800372c:	2050      	movs	r0, #80	@ 0x50
 800372e:	f000 fc95 	bl	800405c <Paint_DrawRectangle>
    Paint_DrawString_EN(10, 0, "hello", &Font16, BLACK, WHITE);
 8003732:	23ff      	movs	r3, #255	@ 0xff
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4b65      	ldr	r3, [pc, #404]	@ (80038d0 <EPD_test+0x2f8>)
 800373c:	4a65      	ldr	r2, [pc, #404]	@ (80038d4 <EPD_test+0x2fc>)
 800373e:	2100      	movs	r1, #0
 8003740:	200a      	movs	r0, #10
 8003742:	f000 ff43 	bl	80045cc <Paint_DrawString_EN>
    Paint_DrawString_CN(130, 20, "΢ѩ����", &Font24CN, WHITE, BLACK);
 8003746:	2300      	movs	r3, #0
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	23ff      	movs	r3, #255	@ 0xff
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4b62      	ldr	r3, [pc, #392]	@ (80038d8 <EPD_test+0x300>)
 8003750:	4a62      	ldr	r2, [pc, #392]	@ (80038dc <EPD_test+0x304>)
 8003752:	2114      	movs	r1, #20
 8003754:	2082      	movs	r0, #130	@ 0x82
 8003756:	f000 ff8d 	bl	8004674 <Paint_DrawString_CN>
    Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 800375a:	2300      	movs	r3, #0
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	23ff      	movs	r3, #255	@ 0xff
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	4b5b      	ldr	r3, [pc, #364]	@ (80038d0 <EPD_test+0x2f8>)
 8003764:	4a5e      	ldr	r2, [pc, #376]	@ (80038e0 <EPD_test+0x308>)
 8003766:	2132      	movs	r1, #50	@ 0x32
 8003768:	200a      	movs	r0, #10
 800376a:	f001 f905 	bl	8004978 <Paint_DrawNum>

    //2.Draw red image
    Paint_SelectImage(RYImage);
 800376e:	6838      	ldr	r0, [r7, #0]
 8003770:	f000 f91a 	bl	80039a8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8003774:	20ff      	movs	r0, #255	@ 0xff
 8003776:	f000 fa75 	bl	8003c64 <Paint_Clear>
    Paint_DrawCircle(160, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800377a:	2300      	movs	r3, #0
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2301      	movs	r3, #1
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	2214      	movs	r2, #20
 8003786:	215f      	movs	r1, #95	@ 0x5f
 8003788:	20a0      	movs	r0, #160	@ 0xa0
 800378a:	f000 fceb 	bl	8004164 <Paint_DrawCircle>
    Paint_DrawCircle(210, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800378e:	2301      	movs	r3, #1
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	2301      	movs	r3, #1
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	2214      	movs	r2, #20
 800379a:	215f      	movs	r1, #95	@ 0x5f
 800379c:	20d2      	movs	r0, #210	@ 0xd2
 800379e:	f000 fce1 	bl	8004164 <Paint_DrawCircle>
    Paint_DrawLine(85, 95, 125, 95, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80037a2:	2301      	movs	r3, #1
 80037a4:	9302      	str	r3, [sp, #8]
 80037a6:	2301      	movs	r3, #1
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2300      	movs	r3, #0
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	235f      	movs	r3, #95	@ 0x5f
 80037b0:	227d      	movs	r2, #125	@ 0x7d
 80037b2:	215f      	movs	r1, #95	@ 0x5f
 80037b4:	2055      	movs	r0, #85	@ 0x55
 80037b6:	f000 fba5 	bl	8003f04 <Paint_DrawLine>
    Paint_DrawLine(105, 75, 105, 115, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80037ba:	2301      	movs	r3, #1
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	2301      	movs	r3, #1
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2300      	movs	r3, #0
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2373      	movs	r3, #115	@ 0x73
 80037c8:	2269      	movs	r2, #105	@ 0x69
 80037ca:	214b      	movs	r1, #75	@ 0x4b
 80037cc:	2069      	movs	r0, #105	@ 0x69
 80037ce:	f000 fb99 	bl	8003f04 <Paint_DrawLine>
    Paint_DrawString_CN(130, 0,"���abc", &Font12CN, BLACK, WHITE);
 80037d2:	23ff      	movs	r3, #255	@ 0xff
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4b42      	ldr	r3, [pc, #264]	@ (80038e4 <EPD_test+0x30c>)
 80037dc:	4a42      	ldr	r2, [pc, #264]	@ (80038e8 <EPD_test+0x310>)
 80037de:	2100      	movs	r1, #0
 80037e0:	2082      	movs	r0, #130	@ 0x82
 80037e2:	f000 ff47 	bl	8004674 <Paint_DrawString_CN>
    Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	23ff      	movs	r3, #255	@ 0xff
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4b3f      	ldr	r3, [pc, #252]	@ (80038ec <EPD_test+0x314>)
 80037f0:	4a3f      	ldr	r2, [pc, #252]	@ (80038f0 <EPD_test+0x318>)
 80037f2:	2114      	movs	r1, #20
 80037f4:	200a      	movs	r0, #10
 80037f6:	f000 fee9 	bl	80045cc <Paint_DrawString_EN>
    Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 80037fa:	23ff      	movs	r3, #255	@ 0xff
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2300      	movs	r3, #0
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4b3a      	ldr	r3, [pc, #232]	@ (80038ec <EPD_test+0x314>)
 8003804:	4a3b      	ldr	r2, [pc, #236]	@ (80038f4 <EPD_test+0x31c>)
 8003806:	2121      	movs	r1, #33	@ 0x21
 8003808:	200a      	movs	r0, #10
 800380a:	f001 f8b5 	bl	8004978 <Paint_DrawNum>

    printf("EPD_Display\r\n");
 800380e:	483a      	ldr	r0, [pc, #232]	@ (80038f8 <EPD_test+0x320>)
 8003810:	f001 fb64 	bl	8004edc <puts>
    EPD_2IN9BC_Display(BlackImage, RYImage);
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe6e 	bl	80034f8 <EPD_2IN9BC_Display>
    while(1)
    {
    	Paint_SelectImage(RYImage);
 800381c:	6838      	ldr	r0, [r7, #0]
 800381e:	f000 f8c3 	bl	80039a8 <Paint_SelectImage>
    	Paint_Clear(WHITE);
 8003822:	20ff      	movs	r0, #255	@ 0xff
 8003824:	f000 fa1e 	bl	8003c64 <Paint_Clear>

        Paint_DrawString_EN(10, 20, "hello newww", &Font12, WHITE, BLACK);
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	23ff      	movs	r3, #255	@ 0xff
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	4b2e      	ldr	r3, [pc, #184]	@ (80038ec <EPD_test+0x314>)
 8003832:	4a32      	ldr	r2, [pc, #200]	@ (80038fc <EPD_test+0x324>)
 8003834:	2114      	movs	r1, #20
 8003836:	200a      	movs	r0, #10
 8003838:	f000 fec8 	bl	80045cc <Paint_DrawString_EN>
            }
        }
        EPD_2IN9BC_SendCommand(0x92);
*/

        EPD_2IN9BC_SendCommand(0x13);
 800383c:	2013      	movs	r0, #19
 800383e:	f7ff fd89 	bl	8003354 <EPD_2IN9BC_SendCommand>
        for (UWORD j = 0; j < 296; j++) {
 8003842:	2300      	movs	r3, #0
 8003844:	81fb      	strh	r3, [r7, #14]
 8003846:	e016      	b.n	8003876 <EPD_test+0x29e>
            for (UWORD i = 0; i < 16; i++) {
 8003848:	2300      	movs	r3, #0
 800384a:	81bb      	strh	r3, [r7, #12]
 800384c:	e00d      	b.n	800386a <EPD_test+0x292>
                EPD_2IN9BC_SendData(RYImage[i + j * 16]);
 800384e:	89ba      	ldrh	r2, [r7, #12]
 8003850:	89fb      	ldrh	r3, [r7, #14]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	4413      	add	r3, r2
 8003856:	461a      	mov	r2, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4413      	add	r3, r2
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fd96 	bl	8003390 <EPD_2IN9BC_SendData>
            for (UWORD i = 0; i < 16; i++) {
 8003864:	89bb      	ldrh	r3, [r7, #12]
 8003866:	3301      	adds	r3, #1
 8003868:	81bb      	strh	r3, [r7, #12]
 800386a:	89bb      	ldrh	r3, [r7, #12]
 800386c:	2b0f      	cmp	r3, #15
 800386e:	d9ee      	bls.n	800384e <EPD_test+0x276>
        for (UWORD j = 0; j < 296; j++) {
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	3301      	adds	r3, #1
 8003874:	81fb      	strh	r3, [r7, #14]
 8003876:	89fb      	ldrh	r3, [r7, #14]
 8003878:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 800387c:	d3e4      	bcc.n	8003848 <EPD_test+0x270>
            }
        }
        EPD_2IN9BC_SendCommand(0x92);
 800387e:	2092      	movs	r0, #146	@ 0x92
 8003880:	f7ff fd68 	bl	8003354 <EPD_2IN9BC_SendCommand>
        EPD_2IN9BC_Sleep();
 8003884:	f7ff fe99 	bl	80035ba <EPD_2IN9BC_Sleep>
        EPD_2IN9BC_Init();
 8003888:	f7ff fdbc 	bl	8003404 <EPD_2IN9BC_Init>

        EPD_2IN9BC_SendCommand(0x22);
 800388c:	2022      	movs	r0, #34	@ 0x22
 800388e:	f7ff fd61 	bl	8003354 <EPD_2IN9BC_SendCommand>
        EPD_2IN9BC_SendData(0xf7);
 8003892:	20f7      	movs	r0, #247	@ 0xf7
 8003894:	f7ff fd7c 	bl	8003390 <EPD_2IN9BC_SendData>
        EPD_2IN9BC_SendCommand(0x20);
 8003898:	2020      	movs	r0, #32
 800389a:	f7ff fd5b 	bl	8003354 <EPD_2IN9BC_SendCommand>
        EPD_2IN9BC_SendCommand(0x12);
 800389e:	2012      	movs	r0, #18
 80038a0:	f7ff fd58 	bl	8003354 <EPD_2IN9BC_SendCommand>

        EPD_2IN9BC_ReadBusy();
 80038a4:	f7ff fd92 	bl	80033cc <EPD_2IN9BC_ReadBusy>

        DEV_Delay_ms(500);
 80038a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80038ac:	f7fd f8aa 	bl	8000a04 <HAL_Delay>
    	Paint_SelectImage(RYImage);
 80038b0:	e7b4      	b.n	800381c <EPD_test+0x244>
    // close 5V
    printf("close 5V, Module enters 0 power consumption ...\r\n");
    //DEV_Module_Exit();
    
    return 0;
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	08005aac 	.word	0x08005aac
 80038c0:	08005ac4 	.word	0x08005ac4
 80038c4:	08005ae0 	.word	0x08005ae0
 80038c8:	08005b08 	.word	0x08005b08
 80038cc:	08005b2c 	.word	0x08005b2c
 80038d0:	20000020 	.word	0x20000020
 80038d4:	08005b50 	.word	0x08005b50
 80038d8:	20000028 	.word	0x20000028
 80038dc:	08005b58 	.word	0x08005b58
 80038e0:	3ade68b1 	.word	0x3ade68b1
 80038e4:	20000014 	.word	0x20000014
 80038e8:	08005b6c 	.word	0x08005b6c
 80038ec:	2000000c 	.word	0x2000000c
 80038f0:	08005b7c 	.word	0x08005b7c
 80038f4:	075bcd15 	.word	0x075bcd15
 80038f8:	08005b88 	.word	0x08005b88
 80038fc:	08005b98 	.word	0x08005b98

08003900 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	817b      	strh	r3, [r7, #10]
 8003912:	460b      	mov	r3, r1
 8003914:	813b      	strh	r3, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800391a:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <Paint_NewImage+0xa4>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8003920:	4a20      	ldr	r2, [pc, #128]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8003926:	4a1f      	ldr	r2, [pc, #124]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003928:	897b      	ldrh	r3, [r7, #10]
 800392a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800392c:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <Paint_NewImage+0xa4>)
 800392e:	893b      	ldrh	r3, [r7, #8]
 8003930:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8003932:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003934:	8b3b      	ldrh	r3, [r7, #24]
 8003936:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8003938:	4b1a      	ldr	r3, [pc, #104]	@ (80039a4 <Paint_NewImage+0xa4>)
 800393a:	2202      	movs	r2, #2
 800393c:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800393e:	897b      	ldrh	r3, [r7, #10]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <Paint_NewImage+0x52>
 800394a:	897b      	ldrh	r3, [r7, #10]
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	b29b      	uxth	r3, r3
 8003950:	e004      	b.n	800395c <Paint_NewImage+0x5c>
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	08db      	lsrs	r3, r3, #3
 8003956:	b29b      	uxth	r3, r3
 8003958:	3301      	adds	r3, #1
 800395a:	b29b      	uxth	r3, r3
 800395c:	4a11      	ldr	r2, [pc, #68]	@ (80039a4 <Paint_NewImage+0xa4>)
 800395e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8003960:	4a10      	ldr	r2, [pc, #64]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003962:	893b      	ldrh	r3, [r7, #8]
 8003964:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8003966:	4a0f      	ldr	r2, [pc, #60]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800396c:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <Paint_NewImage+0xa4>)
 800396e:	2200      	movs	r2, #0
 8003970:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <Paint_NewImage+0x7e>
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	2bb4      	cmp	r3, #180	@ 0xb4
 800397c:	d106      	bne.n	800398c <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800397e:	4a09      	ldr	r2, [pc, #36]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003980:	897b      	ldrh	r3, [r7, #10]
 8003982:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8003984:	4a07      	ldr	r2, [pc, #28]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	80d3      	strh	r3, [r2, #6]
 800398a:	e006      	b.n	800399a <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800398c:	4a05      	ldr	r2, [pc, #20]	@ (80039a4 <Paint_NewImage+0xa4>)
 800398e:	893b      	ldrh	r3, [r7, #8]
 8003990:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8003992:	4a04      	ldr	r2, [pc, #16]	@ (80039a4 <Paint_NewImage+0xa4>)
 8003994:	897b      	ldrh	r3, [r7, #10]
 8003996:	80d3      	strh	r3, [r2, #6]
    }
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	200001ac 	.word	0x200001ac

080039a8 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 80039b0:	4a03      	ldr	r2, [pc, #12]	@ (80039c0 <Paint_SelectImage+0x18>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6013      	str	r3, [r2, #0]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	200001ac 	.word	0x200001ac

080039c4 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	@ 0x28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
 80039ce:	460b      	mov	r3, r1
 80039d0:	80bb      	strh	r3, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80039d6:	4b9f      	ldr	r3, [pc, #636]	@ (8003c54 <Paint_SetPixel+0x290>)
 80039d8:	889b      	ldrh	r3, [r3, #4]
 80039da:	88fa      	ldrh	r2, [r7, #6]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d804      	bhi.n	80039ea <Paint_SetPixel+0x26>
 80039e0:	4b9c      	ldr	r3, [pc, #624]	@ (8003c54 <Paint_SetPixel+0x290>)
 80039e2:	88db      	ldrh	r3, [r3, #6]
 80039e4:	88ba      	ldrh	r2, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d903      	bls.n	80039f2 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80039ea:	489b      	ldr	r0, [pc, #620]	@ (8003c58 <Paint_SetPixel+0x294>)
 80039ec:	f001 fa76 	bl	8004edc <puts>
        return;
 80039f0:	e135      	b.n	8003c5e <Paint_SetPixel+0x29a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80039f2:	4b98      	ldr	r3, [pc, #608]	@ (8003c54 <Paint_SetPixel+0x290>)
 80039f4:	89db      	ldrh	r3, [r3, #14]
 80039f6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80039fa:	d02b      	beq.n	8003a54 <Paint_SetPixel+0x90>
 80039fc:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003a00:	f300 8126 	bgt.w	8003c50 <Paint_SetPixel+0x28c>
 8003a04:	2bb4      	cmp	r3, #180	@ 0xb4
 8003a06:	d016      	beq.n	8003a36 <Paint_SetPixel+0x72>
 8003a08:	2bb4      	cmp	r3, #180	@ 0xb4
 8003a0a:	f300 8121 	bgt.w	8003c50 <Paint_SetPixel+0x28c>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <Paint_SetPixel+0x54>
 8003a12:	2b5a      	cmp	r3, #90	@ 0x5a
 8003a14:	d005      	beq.n	8003a22 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8003a16:	e11b      	b.n	8003c50 <Paint_SetPixel+0x28c>
        X = Xpoint;
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 8003a1c:	88bb      	ldrh	r3, [r7, #4]
 8003a1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8003a20:	e022      	b.n	8003a68 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8003a22:	4b8c      	ldr	r3, [pc, #560]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003a24:	891a      	ldrh	r2, [r3, #8]
 8003a26:	88bb      	ldrh	r3, [r7, #4]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8003a34:	e018      	b.n	8003a68 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8003a36:	4b87      	ldr	r3, [pc, #540]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003a38:	891a      	ldrh	r2, [r3, #8]
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8003a44:	4b83      	ldr	r3, [pc, #524]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003a46:	895a      	ldrh	r2, [r3, #10]
 8003a48:	88bb      	ldrh	r3, [r7, #4]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8003a52:	e009      	b.n	8003a68 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8003a54:	88bb      	ldrh	r3, [r7, #4]
 8003a56:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8003a58:	4b7e      	ldr	r3, [pc, #504]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003a5a:	895a      	ldrh	r2, [r3, #10]
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8003a66:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8003a68:	4b7a      	ldr	r3, [pc, #488]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003a6a:	8a1b      	ldrh	r3, [r3, #16]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	f200 80f5 	bhi.w	8003c5c <Paint_SetPixel+0x298>
 8003a72:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <Paint_SetPixel+0xb4>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003ac7 	.word	0x08003ac7
 8003a7c:	08003a89 	.word	0x08003a89
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003aa9 	.word	0x08003aa9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8003a88:	4b72      	ldr	r3, [pc, #456]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003a8a:	891a      	ldrh	r2, [r3, #8]
 8003a8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 8003a96:	e017      	b.n	8003ac8 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8003a98:	4b6e      	ldr	r3, [pc, #440]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003a9a:	895a      	ldrh	r2, [r3, #10]
 8003a9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8003aa6:	e00f      	b.n	8003ac8 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003aaa:	891a      	ldrh	r2, [r3, #8]
 8003aac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 8003ab6:	4b67      	ldr	r3, [pc, #412]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003ab8:	895a      	ldrh	r2, [r3, #10]
 8003aba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8003ac4:	e000      	b.n	8003ac8 <Paint_SetPixel+0x104>
        break;
 8003ac6:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8003ac8:	4b62      	ldr	r3, [pc, #392]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003aca:	891b      	ldrh	r3, [r3, #8]
 8003acc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d804      	bhi.n	8003adc <Paint_SetPixel+0x118>
 8003ad2:	4b60      	ldr	r3, [pc, #384]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003ad4:	895b      	ldrh	r3, [r3, #10]
 8003ad6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d903      	bls.n	8003ae4 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8003adc:	485e      	ldr	r0, [pc, #376]	@ (8003c58 <Paint_SetPixel+0x294>)
 8003ade:	f001 f9fd 	bl	8004edc <puts>
        return;
 8003ae2:	e0bc      	b.n	8003c5e <Paint_SetPixel+0x29a>
    }
    
    if(Paint.Scale == 2){
 8003ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003ae6:	8adb      	ldrh	r3, [r3, #22]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d139      	bne.n	8003b60 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8003aec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003aee:	08db      	lsrs	r3, r3, #3
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4619      	mov	r1, r3
 8003af4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003af6:	4a57      	ldr	r2, [pc, #348]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003af8:	8a52      	ldrh	r2, [r2, #18]
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	440b      	add	r3, r1
 8003b00:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8003b02:	4b54      	ldr	r3, [pc, #336]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d113      	bne.n	8003b3c <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8003b14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	fa42 f303 	asr.w	r3, r2, r3
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b259      	sxtb	r1, r3
 8003b2e:	4b49      	ldr	r3, [pc, #292]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	b2ca      	uxtb	r2, r1
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e090      	b.n	8003c5e <Paint_SetPixel+0x29a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8003b3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2280      	movs	r2, #128	@ 0x80
 8003b44:	fa42 f303 	asr.w	r3, r2, r3
 8003b48:	b25a      	sxtb	r2, r3
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b259      	sxtb	r1, r3
 8003b52:	4b40      	ldr	r3, [pc, #256]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	b2ca      	uxtb	r2, r1
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e07e      	b.n	8003c5e <Paint_SetPixel+0x29a>
    }else if(Paint.Scale == 4){
 8003b60:	4b3c      	ldr	r3, [pc, #240]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003b62:	8adb      	ldrh	r3, [r3, #22]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d137      	bne.n	8003bd8 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8003b68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b72:	4a38      	ldr	r2, [pc, #224]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003b74:	8a52      	ldrh	r2, [r2, #18]
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8003b86:	4b33      	ldr	r3, [pc, #204]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8003b92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	22c0      	movs	r2, #192	@ 0xc0
 8003b9c:	fa42 f303 	asr.w	r3, r2, r3
 8003ba0:	b25b      	sxtb	r3, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	b25a      	sxtb	r2, r3
 8003ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003baa:	4013      	ands	r3, r2
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8003bb0:	887b      	ldrh	r3, [r7, #2]
 8003bb2:	019a      	lsls	r2, r3, #6
 8003bb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa42 f303 	asr.w	r3, r2, r3
 8003bc0:	b25a      	sxtb	r2, r3
 8003bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b259      	sxtb	r1, r3
 8003bca:	4b22      	ldr	r3, [pc, #136]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	b2ca      	uxtb	r2, r1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e042      	b.n	8003c5e <Paint_SetPixel+0x29a>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003bda:	8adb      	ldrh	r3, [r3, #22]
 8003bdc:	2b06      	cmp	r3, #6
 8003bde:	d003      	beq.n	8003be8 <Paint_SetPixel+0x224>
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003be2:	8adb      	ldrh	r3, [r3, #22]
 8003be4:	2b07      	cmp	r3, #7
 8003be6:	d13a      	bne.n	8003c5e <Paint_SetPixel+0x29a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8003be8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bf2:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003bf4:	8a52      	ldrh	r2, [r2, #18]
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8003bfe:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	4413      	add	r3, r2
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8003c0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	22f0      	movs	r2, #240	@ 0xf0
 8003c14:	fa42 f303 	asr.w	r3, r2, r3
 8003c18:	b25b      	sxtb	r3, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	b25a      	sxtb	r2, r3
 8003c1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c22:	4013      	ands	r3, r2
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	011a      	lsls	r2, r3, #4
 8003c2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fa42 f303 	asr.w	r3, r2, r3
 8003c38:	b25a      	sxtb	r2, r3
 8003c3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b259      	sxtb	r1, r3
 8003c42:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <Paint_SetPixel+0x290>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	4413      	add	r3, r2
 8003c4a:	b2ca      	uxtb	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e006      	b.n	8003c5e <Paint_SetPixel+0x29a>
        return;
 8003c50:	bf00      	nop
 8003c52:	e004      	b.n	8003c5e <Paint_SetPixel+0x29a>
 8003c54:	200001ac 	.word	0x200001ac
 8003c58:	08005ccc 	.word	0x08005ccc
        return;
 8003c5c:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8003c5e:	3728      	adds	r7, #40	@ 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	@ 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8003c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003da8 <Paint_Clear+0x144>)
 8003c70:	8adb      	ldrh	r3, [r3, #22]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d125      	bne.n	8003cc2 <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003c76:	2300      	movs	r3, #0
 8003c78:	83fb      	strh	r3, [r7, #30]
 8003c7a:	e01c      	b.n	8003cb6 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	83bb      	strh	r3, [r7, #28]
 8003c80:	e011      	b.n	8003ca6 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003c82:	8bba      	ldrh	r2, [r7, #28]
 8003c84:	8bfb      	ldrh	r3, [r7, #30]
 8003c86:	4948      	ldr	r1, [pc, #288]	@ (8003da8 <Paint_Clear+0x144>)
 8003c88:	8a49      	ldrh	r1, [r1, #18]
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8003c92:	4b45      	ldr	r3, [pc, #276]	@ (8003da8 <Paint_Clear+0x144>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4413      	add	r3, r2
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8003ca0:	8bbb      	ldrh	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	83bb      	strh	r3, [r7, #28]
 8003ca6:	4b40      	ldr	r3, [pc, #256]	@ (8003da8 <Paint_Clear+0x144>)
 8003ca8:	8a5b      	ldrh	r3, [r3, #18]
 8003caa:	8bba      	ldrh	r2, [r7, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3e8      	bcc.n	8003c82 <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003cb0:	8bfb      	ldrh	r3, [r7, #30]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	83fb      	strh	r3, [r7, #30]
 8003cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003da8 <Paint_Clear+0x144>)
 8003cb8:	8a9b      	ldrh	r3, [r3, #20]
 8003cba:	8bfa      	ldrh	r2, [r7, #30]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d3dd      	bcc.n	8003c7c <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8003cc0:	e06c      	b.n	8003d9c <Paint_Clear+0x138>
    }else if(Paint.Scale == 4) {
 8003cc2:	4b39      	ldr	r3, [pc, #228]	@ (8003da8 <Paint_Clear+0x144>)
 8003cc4:	8adb      	ldrh	r3, [r3, #22]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d135      	bne.n	8003d36 <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003cca:	2300      	movs	r3, #0
 8003ccc:	837b      	strh	r3, [r7, #26]
 8003cce:	e02c      	b.n	8003d2a <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	833b      	strh	r3, [r7, #24]
 8003cd4:	e021      	b.n	8003d1a <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003cd6:	8b3a      	ldrh	r2, [r7, #24]
 8003cd8:	8b7b      	ldrh	r3, [r7, #26]
 8003cda:	4933      	ldr	r1, [pc, #204]	@ (8003da8 <Paint_Clear+0x144>)
 8003cdc:	8a49      	ldrh	r1, [r1, #18]
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	b25a      	sxtb	r2, r3
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b25a      	sxtb	r2, r3
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	b25b      	sxtb	r3, r3
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	b25a      	sxtb	r2, r3
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	b25b      	sxtb	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	b259      	sxtb	r1, r3
 8003d08:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <Paint_Clear+0x144>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	b2ca      	uxtb	r2, r1
 8003d12:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003d14:	8b3b      	ldrh	r3, [r7, #24]
 8003d16:	3301      	adds	r3, #1
 8003d18:	833b      	strh	r3, [r7, #24]
 8003d1a:	4b23      	ldr	r3, [pc, #140]	@ (8003da8 <Paint_Clear+0x144>)
 8003d1c:	8a5b      	ldrh	r3, [r3, #18]
 8003d1e:	8b3a      	ldrh	r2, [r7, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3d8      	bcc.n	8003cd6 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003d24:	8b7b      	ldrh	r3, [r7, #26]
 8003d26:	3301      	adds	r3, #1
 8003d28:	837b      	strh	r3, [r7, #26]
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <Paint_Clear+0x144>)
 8003d2c:	8a9b      	ldrh	r3, [r3, #20]
 8003d2e:	8b7a      	ldrh	r2, [r7, #26]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d3cd      	bcc.n	8003cd0 <Paint_Clear+0x6c>
}
 8003d34:	e032      	b.n	8003d9c <Paint_Clear+0x138>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8003d36:	4b1c      	ldr	r3, [pc, #112]	@ (8003da8 <Paint_Clear+0x144>)
 8003d38:	8adb      	ldrh	r3, [r3, #22]
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d003      	beq.n	8003d46 <Paint_Clear+0xe2>
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003da8 <Paint_Clear+0x144>)
 8003d40:	8adb      	ldrh	r3, [r3, #22]
 8003d42:	2b07      	cmp	r3, #7
 8003d44:	d12a      	bne.n	8003d9c <Paint_Clear+0x138>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003d46:	2300      	movs	r3, #0
 8003d48:	82fb      	strh	r3, [r7, #22]
 8003d4a:	e022      	b.n	8003d92 <Paint_Clear+0x12e>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	82bb      	strh	r3, [r7, #20]
 8003d50:	e017      	b.n	8003d82 <Paint_Clear+0x11e>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003d52:	8aba      	ldrh	r2, [r7, #20]
 8003d54:	8afb      	ldrh	r3, [r7, #22]
 8003d56:	4914      	ldr	r1, [pc, #80]	@ (8003da8 <Paint_Clear+0x144>)
 8003d58:	8a49      	ldrh	r1, [r1, #18]
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	b25a      	sxtb	r2, r3
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	b25b      	sxtb	r3, r3
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	b259      	sxtb	r1, r3
 8003d70:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <Paint_Clear+0x144>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	b2ca      	uxtb	r2, r1
 8003d7a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003d7c:	8abb      	ldrh	r3, [r7, #20]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	82bb      	strh	r3, [r7, #20]
 8003d82:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <Paint_Clear+0x144>)
 8003d84:	8a5b      	ldrh	r3, [r3, #18]
 8003d86:	8aba      	ldrh	r2, [r7, #20]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d3e2      	bcc.n	8003d52 <Paint_Clear+0xee>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003d8c:	8afb      	ldrh	r3, [r7, #22]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	82fb      	strh	r3, [r7, #22]
 8003d92:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <Paint_Clear+0x144>)
 8003d94:	8a9b      	ldrh	r3, [r3, #20]
 8003d96:	8afa      	ldrh	r2, [r7, #22]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3d7      	bcc.n	8003d4c <Paint_Clear+0xe8>
}
 8003d9c:	bf00      	nop
 8003d9e:	3724      	adds	r7, #36	@ 0x24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	200001ac 	.word	0x200001ac

08003dac <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4604      	mov	r4, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4623      	mov	r3, r4
 8003dbc:	80fb      	strh	r3, [r7, #6]
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80bb      	strh	r3, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	807b      	strh	r3, [r7, #2]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8003dca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef4 <Paint_DrawPoint+0x148>)
 8003dcc:	889b      	ldrh	r3, [r3, #4]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d804      	bhi.n	8003dde <Paint_DrawPoint+0x32>
 8003dd4:	4b47      	ldr	r3, [pc, #284]	@ (8003ef4 <Paint_DrawPoint+0x148>)
 8003dd6:	88db      	ldrh	r3, [r3, #6]
 8003dd8:	88ba      	ldrh	r2, [r7, #4]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d911      	bls.n	8003e02 <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8003dde:	4846      	ldr	r0, [pc, #280]	@ (8003ef8 <Paint_DrawPoint+0x14c>)
 8003de0:	f001 f87c 	bl	8004edc <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	4a43      	ldr	r2, [pc, #268]	@ (8003ef4 <Paint_DrawPoint+0x148>)
 8003de8:	8892      	ldrh	r2, [r2, #4]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4843      	ldr	r0, [pc, #268]	@ (8003efc <Paint_DrawPoint+0x150>)
 8003dee:	f001 f80d 	bl	8004e0c <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8003df2:	88bb      	ldrh	r3, [r7, #4]
 8003df4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef4 <Paint_DrawPoint+0x148>)
 8003df6:	88d2      	ldrh	r2, [r2, #6]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4841      	ldr	r0, [pc, #260]	@ (8003f00 <Paint_DrawPoint+0x154>)
 8003dfc:	f001 f806 	bl	8004e0c <iprintf>
        return;
 8003e00:	e074      	b.n	8003eec <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8003e02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d144      	bne.n	8003e94 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	81fb      	strh	r3, [r7, #14]
 8003e0e:	e039      	b.n	8003e84 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8003e10:	2300      	movs	r3, #0
 8003e12:	81bb      	strh	r3, [r7, #12]
 8003e14:	e029      	b.n	8003e6a <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e1c:	441a      	add	r2, r3
 8003e1e:	787b      	ldrb	r3, [r7, #1]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db28      	blt.n	8003e78 <Paint_DrawPoint+0xcc>
 8003e26:	88ba      	ldrh	r2, [r7, #4]
 8003e28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	787b      	ldrb	r3, [r7, #1]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db20      	blt.n	8003e78 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8003e36:	89fa      	ldrh	r2, [r7, #14]
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	787b      	ldrb	r3, [r7, #1]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	b298      	uxth	r0, r3
 8003e46:	89ba      	ldrh	r2, [r7, #12]
 8003e48:	88bb      	ldrh	r3, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	787b      	ldrb	r3, [r7, #1]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7ff fdb3 	bl	80039c4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8003e5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	81bb      	strh	r3, [r7, #12]
 8003e6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e6e:	787b      	ldrb	r3, [r7, #1]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	429a      	cmp	r2, r3
 8003e76:	dbce      	blt.n	8003e16 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8003e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	81fb      	strh	r3, [r7, #14]
 8003e84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003e88:	787b      	ldrb	r3, [r7, #1]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	dbbe      	blt.n	8003e10 <Paint_DrawPoint+0x64>
 8003e92:	e02b      	b.n	8003eec <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8003e94:	2300      	movs	r3, #0
 8003e96:	81fb      	strh	r3, [r7, #14]
 8003e98:	e023      	b.n	8003ee2 <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	81bb      	strh	r3, [r7, #12]
 8003e9e:	e015      	b.n	8003ecc <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8003ea0:	89fa      	ldrh	r2, [r7, #14]
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b298      	uxth	r0, r3
 8003eac:	89ba      	ldrh	r2, [r7, #12]
 8003eae:	88bb      	ldrh	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	887a      	ldrh	r2, [r7, #2]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7ff fd82 	bl	80039c4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8003ec0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	81bb      	strh	r3, [r7, #12]
 8003ecc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	dbe4      	blt.n	8003ea0 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8003ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3301      	adds	r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	81fb      	strh	r3, [r7, #14]
 8003ee2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003ee6:	787b      	ldrb	r3, [r7, #1]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	dbd6      	blt.n	8003e9a <Paint_DrawPoint+0xee>
            }
        }
    }
}
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200001ac 	.word	0x200001ac
 8003ef8:	08005cf4 	.word	0x08005cf4
 8003efc:	08005d34 	.word	0x08005d34
 8003f00:	08005d58 	.word	0x08005d58

08003f04 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b08d      	sub	sp, #52	@ 0x34
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	80fb      	strh	r3, [r7, #6]
 8003f16:	4603      	mov	r3, r0
 8003f18:	80bb      	strh	r3, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	807b      	strh	r3, [r7, #2]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8003f22:	4b4b      	ldr	r3, [pc, #300]	@ (8004050 <Paint_DrawLine+0x14c>)
 8003f24:	889b      	ldrh	r3, [r3, #4]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d80e      	bhi.n	8003f4a <Paint_DrawLine+0x46>
 8003f2c:	4b48      	ldr	r3, [pc, #288]	@ (8004050 <Paint_DrawLine+0x14c>)
 8003f2e:	88db      	ldrh	r3, [r3, #6]
 8003f30:	88ba      	ldrh	r2, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d809      	bhi.n	8003f4a <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8003f36:	4b46      	ldr	r3, [pc, #280]	@ (8004050 <Paint_DrawLine+0x14c>)
 8003f38:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d804      	bhi.n	8003f4a <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8003f40:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <Paint_DrawLine+0x14c>)
 8003f42:	88db      	ldrh	r3, [r3, #6]
 8003f44:	883a      	ldrh	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d903      	bls.n	8003f52 <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8003f4a:	4842      	ldr	r0, [pc, #264]	@ (8004054 <Paint_DrawLine+0x150>)
 8003f4c:	f000 ffc6 	bl	8004edc <puts>
        return;
 8003f50:	e07a      	b.n	8004048 <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	84fb      	strh	r3, [r7, #38]	@ 0x26
    UWORD Ypoint = Ystart;
 8003f56:	88bb      	ldrh	r3, [r7, #4]
 8003f58:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bfb8      	it	lt
 8003f64:	425b      	neglt	r3, r3
 8003f66:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8003f68:	883a      	ldrh	r2, [r7, #0]
 8003f6a:	88bb      	ldrh	r3, [r7, #4]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bfb8      	it	lt
 8003f72:	425b      	neglt	r3, r3
 8003f74:	425b      	negs	r3, r3
 8003f76:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d201      	bcs.n	8003f84 <Paint_DrawLine+0x80>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e001      	b.n	8003f88 <Paint_DrawLine+0x84>
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8003f8a:	88ba      	ldrh	r2, [r7, #4]
 8003f8c:	883b      	ldrh	r3, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d201      	bcs.n	8003f96 <Paint_DrawLine+0x92>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e001      	b.n	8003f9a <Paint_DrawLine+0x96>
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8003fa8:	7ffb      	ldrb	r3, [r7, #31]
 8003faa:	3301      	adds	r3, #1
 8003fac:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8003fae:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d117      	bne.n	8003fe6 <Paint_DrawLine+0xe2>
 8003fb6:	7ffa      	ldrb	r2, [r7, #31]
 8003fb8:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <Paint_DrawLine+0x154>)
 8003fba:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbe:	0859      	lsrs	r1, r3, #1
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	440b      	add	r3, r1
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8003fce:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003fd2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003fd4:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	9200      	str	r2, [sp, #0]
 8003fda:	22ff      	movs	r2, #255	@ 0xff
 8003fdc:	f7ff fee6 	bl	8003dac <Paint_DrawPoint>
            Dotted_Len = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e008      	b.n	8003ff8 <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8003fe6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003fea:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003fec:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003fee:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8003ff0:	2401      	movs	r4, #1
 8003ff2:	9400      	str	r4, [sp, #0]
 8003ff4:	f7ff feda 	bl	8003dac <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	dc0c      	bgt.n	800401c <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 8004002:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	429a      	cmp	r2, r3
 8004008:	d01b      	beq.n	8004042 <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 800400a:	6a3a      	ldr	r2, [r7, #32]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4413      	add	r3, r2
 8004010:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	b29a      	uxth	r2, r3
 8004016:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004018:	4413      	add	r3, r2
 800401a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if (2 * Esp <= dx) {
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	429a      	cmp	r2, r3
 8004024:	dbc0      	blt.n	8003fa8 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 8004026:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004028:	883b      	ldrh	r3, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d00b      	beq.n	8004046 <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	b29a      	uxth	r2, r3
 800403a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800403c:	4413      	add	r3, r2
 800403e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Dotted_Len++;
 8004040:	e7b2      	b.n	8003fa8 <Paint_DrawLine+0xa4>
                break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <Paint_DrawLine+0x144>
                break;
 8004046:	bf00      	nop
        }
    }
}
 8004048:	372c      	adds	r7, #44	@ 0x2c
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	200001ac 	.word	0x200001ac
 8004054:	08005d80 	.word	0x08005d80
 8004058:	aaaaaaab 	.word	0xaaaaaaab

0800405c <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b089      	sub	sp, #36	@ 0x24
 8004060:	af04      	add	r7, sp, #16
 8004062:	4604      	mov	r4, r0
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4623      	mov	r3, r4
 800406c:	80fb      	strh	r3, [r7, #6]
 800406e:	4603      	mov	r3, r0
 8004070:	80bb      	strh	r3, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	807b      	strh	r3, [r7, #2]
 8004076:	4613      	mov	r3, r2
 8004078:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800407a:	4b38      	ldr	r3, [pc, #224]	@ (800415c <Paint_DrawRectangle+0x100>)
 800407c:	889b      	ldrh	r3, [r3, #4]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	429a      	cmp	r2, r3
 8004082:	d80e      	bhi.n	80040a2 <Paint_DrawRectangle+0x46>
 8004084:	4b35      	ldr	r3, [pc, #212]	@ (800415c <Paint_DrawRectangle+0x100>)
 8004086:	88db      	ldrh	r3, [r3, #6]
 8004088:	88ba      	ldrh	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d809      	bhi.n	80040a2 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800408e:	4b33      	ldr	r3, [pc, #204]	@ (800415c <Paint_DrawRectangle+0x100>)
 8004090:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	429a      	cmp	r2, r3
 8004096:	d804      	bhi.n	80040a2 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8004098:	4b30      	ldr	r3, [pc, #192]	@ (800415c <Paint_DrawRectangle+0x100>)
 800409a:	88db      	ldrh	r3, [r3, #6]
 800409c:	883a      	ldrh	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d903      	bls.n	80040aa <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 80040a2:	482f      	ldr	r0, [pc, #188]	@ (8004160 <Paint_DrawRectangle+0x104>)
 80040a4:	f000 ff1a 	bl	8004edc <puts>
        return;
 80040a8:	e054      	b.n	8004154 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 80040aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80040b2:	88bb      	ldrh	r3, [r7, #4]
 80040b4:	81fb      	strh	r3, [r7, #14]
 80040b6:	e010      	b.n	80040da <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 80040b8:	89fc      	ldrh	r4, [r7, #14]
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	89f9      	ldrh	r1, [r7, #14]
 80040be:	88f8      	ldrh	r0, [r7, #6]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	8c3b      	ldrh	r3, [r7, #32]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4623      	mov	r3, r4
 80040d0:	f7ff ff18 	bl	8003f04 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80040d4:	89fb      	ldrh	r3, [r7, #14]
 80040d6:	3301      	adds	r3, #1
 80040d8:	81fb      	strh	r3, [r7, #14]
 80040da:	89fa      	ldrh	r2, [r7, #14]
 80040dc:	883b      	ldrh	r3, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d3ea      	bcc.n	80040b8 <Paint_DrawRectangle+0x5c>
 80040e2:	e037      	b.n	8004154 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80040e4:	88bc      	ldrh	r4, [r7, #4]
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	88b9      	ldrh	r1, [r7, #4]
 80040ea:	88f8      	ldrh	r0, [r7, #6]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9302      	str	r3, [sp, #8]
 80040f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	8c3b      	ldrh	r3, [r7, #32]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4623      	mov	r3, r4
 80040fc:	f7ff ff02 	bl	8003f04 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8004100:	883c      	ldrh	r4, [r7, #0]
 8004102:	88fa      	ldrh	r2, [r7, #6]
 8004104:	88b9      	ldrh	r1, [r7, #4]
 8004106:	88f8      	ldrh	r0, [r7, #6]
 8004108:	2300      	movs	r3, #0
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	8c3b      	ldrh	r3, [r7, #32]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4623      	mov	r3, r4
 8004118:	f7ff fef4 	bl	8003f04 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800411c:	88bc      	ldrh	r4, [r7, #4]
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	8839      	ldrh	r1, [r7, #0]
 8004122:	8878      	ldrh	r0, [r7, #2]
 8004124:	2300      	movs	r3, #0
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	8c3b      	ldrh	r3, [r7, #32]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4623      	mov	r3, r4
 8004134:	f7ff fee6 	bl	8003f04 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8004138:	883c      	ldrh	r4, [r7, #0]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	8839      	ldrh	r1, [r7, #0]
 800413e:	8878      	ldrh	r0, [r7, #2]
 8004140:	2300      	movs	r3, #0
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	8c3b      	ldrh	r3, [r7, #32]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4623      	mov	r3, r4
 8004150:	f7ff fed8 	bl	8003f04 <Paint_DrawLine>
    }
}
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}
 800415a:	bf00      	nop
 800415c:	200001ac 	.word	0x200001ac
 8004160:	08005dc0 	.word	0x08005dc0

08004164 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b087      	sub	sp, #28
 8004168:	af02      	add	r7, sp, #8
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4623      	mov	r3, r4
 8004174:	80fb      	strh	r3, [r7, #6]
 8004176:	4603      	mov	r3, r0
 8004178:	80bb      	strh	r3, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	807b      	strh	r3, [r7, #2]
 800417e:	4613      	mov	r3, r2
 8004180:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8004182:	4b67      	ldr	r3, [pc, #412]	@ (8004320 <Paint_DrawCircle+0x1bc>)
 8004184:	889b      	ldrh	r3, [r3, #4]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	429a      	cmp	r2, r3
 800418a:	d804      	bhi.n	8004196 <Paint_DrawCircle+0x32>
 800418c:	4b64      	ldr	r3, [pc, #400]	@ (8004320 <Paint_DrawCircle+0x1bc>)
 800418e:	88db      	ldrh	r3, [r3, #6]
 8004190:	88ba      	ldrh	r2, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d303      	bcc.n	800419e <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8004196:	4863      	ldr	r0, [pc, #396]	@ (8004324 <Paint_DrawCircle+0x1c0>)
 8004198:	f000 fea0 	bl	8004edc <puts>
        return;
 800419c:	e16b      	b.n	8004476 <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f1c3 0303 	rsb	r3, r3, #3
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 80041b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	f040 8155 	bne.w	8004468 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 80041be:	e0a6      	b.n	800430e <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	813b      	strh	r3, [r7, #8]
 80041c4:	e075      	b.n	80042b2 <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 80041c6:	89fa      	ldrh	r2, [r7, #14]
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	4413      	add	r3, r2
 80041cc:	b298      	uxth	r0, r3
 80041ce:	893a      	ldrh	r2, [r7, #8]
 80041d0:	88bb      	ldrh	r3, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	b299      	uxth	r1, r3
 80041d6:	883a      	ldrh	r2, [r7, #0]
 80041d8:	2301      	movs	r3, #1
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2301      	movs	r3, #1
 80041de:	f7ff fde5 	bl	8003dac <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	88fa      	ldrh	r2, [r7, #6]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	b298      	uxth	r0, r3
 80041ea:	893a      	ldrh	r2, [r7, #8]
 80041ec:	88bb      	ldrh	r3, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	b299      	uxth	r1, r3
 80041f2:	883a      	ldrh	r2, [r7, #0]
 80041f4:	2301      	movs	r3, #1
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2301      	movs	r3, #1
 80041fa:	f7ff fdd7 	bl	8003dac <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 80041fe:	893b      	ldrh	r3, [r7, #8]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	b298      	uxth	r0, r3
 8004206:	89fa      	ldrh	r2, [r7, #14]
 8004208:	88bb      	ldrh	r3, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	b299      	uxth	r1, r3
 800420e:	883a      	ldrh	r2, [r7, #0]
 8004210:	2301      	movs	r3, #1
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2301      	movs	r3, #1
 8004216:	f7ff fdc9 	bl	8003dac <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800421a:	893b      	ldrh	r3, [r7, #8]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	b298      	uxth	r0, r3
 8004222:	89fb      	ldrh	r3, [r7, #14]
 8004224:	88ba      	ldrh	r2, [r7, #4]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	b299      	uxth	r1, r3
 800422a:	883a      	ldrh	r2, [r7, #0]
 800422c:	2301      	movs	r3, #1
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2301      	movs	r3, #1
 8004232:	f7ff fdbb 	bl	8003dac <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8004236:	89fb      	ldrh	r3, [r7, #14]
 8004238:	88fa      	ldrh	r2, [r7, #6]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b298      	uxth	r0, r3
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	88ba      	ldrh	r2, [r7, #4]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	b299      	uxth	r1, r3
 8004246:	883a      	ldrh	r2, [r7, #0]
 8004248:	2301      	movs	r3, #1
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2301      	movs	r3, #1
 800424e:	f7ff fdad 	bl	8003dac <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8004252:	89fa      	ldrh	r2, [r7, #14]
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	4413      	add	r3, r2
 8004258:	b298      	uxth	r0, r3
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	88ba      	ldrh	r2, [r7, #4]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	b299      	uxth	r1, r3
 8004262:	883a      	ldrh	r2, [r7, #0]
 8004264:	2301      	movs	r3, #1
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2301      	movs	r3, #1
 800426a:	f7ff fd9f 	bl	8003dac <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800426e:	893a      	ldrh	r2, [r7, #8]
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	4413      	add	r3, r2
 8004274:	b298      	uxth	r0, r3
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	88ba      	ldrh	r2, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	b299      	uxth	r1, r3
 800427e:	883a      	ldrh	r2, [r7, #0]
 8004280:	2301      	movs	r3, #1
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2301      	movs	r3, #1
 8004286:	f7ff fd91 	bl	8003dac <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800428a:	893a      	ldrh	r2, [r7, #8]
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	4413      	add	r3, r2
 8004290:	b298      	uxth	r0, r3
 8004292:	89fa      	ldrh	r2, [r7, #14]
 8004294:	88bb      	ldrh	r3, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	b299      	uxth	r1, r3
 800429a:	883a      	ldrh	r2, [r7, #0]
 800429c:	2301      	movs	r3, #1
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2301      	movs	r3, #1
 80042a2:	f7ff fd83 	bl	8003dac <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80042a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	813b      	strh	r3, [r7, #8]
 80042b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80042b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	dd83      	ble.n	80041c6 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 80042be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da09      	bge.n	80042da <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 80042c6:	89fb      	ldrh	r3, [r7, #14]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	897b      	ldrh	r3, [r7, #10]
 80042ce:	4413      	add	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3306      	adds	r3, #6
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	817b      	strh	r3, [r7, #10]
 80042d8:	e013      	b.n	8004302 <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80042da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80042de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	4413      	add	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	330a      	adds	r3, #10
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80042f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29b      	uxth	r3, r3
 8004300:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8004302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004306:	b29b      	uxth	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800430e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004312:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004316:	429a      	cmp	r2, r3
 8004318:	f77f af52 	ble.w	80041c0 <Paint_DrawCircle+0x5c>
 800431c:	e0ab      	b.n	8004476 <Paint_DrawCircle+0x312>
 800431e:	bf00      	nop
 8004320:	200001ac 	.word	0x200001ac
 8004324:	08005df0 	.word	0x08005df0
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8004328:	89fa      	ldrh	r2, [r7, #14]
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	4413      	add	r3, r2
 800432e:	b298      	uxth	r0, r3
 8004330:	89ba      	ldrh	r2, [r7, #12]
 8004332:	88bb      	ldrh	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	b299      	uxth	r1, r3
 8004338:	f897 3020 	ldrb.w	r3, [r7, #32]
 800433c:	883a      	ldrh	r2, [r7, #0]
 800433e:	2401      	movs	r4, #1
 8004340:	9400      	str	r4, [sp, #0]
 8004342:	f7ff fd33 	bl	8003dac <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8004346:	89fb      	ldrh	r3, [r7, #14]
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	b298      	uxth	r0, r3
 800434e:	89ba      	ldrh	r2, [r7, #12]
 8004350:	88bb      	ldrh	r3, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	b299      	uxth	r1, r3
 8004356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800435a:	883a      	ldrh	r2, [r7, #0]
 800435c:	2401      	movs	r4, #1
 800435e:	9400      	str	r4, [sp, #0]
 8004360:	f7ff fd24 	bl	8003dac <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8004364:	89bb      	ldrh	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	b298      	uxth	r0, r3
 800436c:	89fa      	ldrh	r2, [r7, #14]
 800436e:	88bb      	ldrh	r3, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	b299      	uxth	r1, r3
 8004374:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004378:	883a      	ldrh	r2, [r7, #0]
 800437a:	2401      	movs	r4, #1
 800437c:	9400      	str	r4, [sp, #0]
 800437e:	f7ff fd15 	bl	8003dac <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8004382:	89bb      	ldrh	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	b298      	uxth	r0, r3
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	88ba      	ldrh	r2, [r7, #4]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	b299      	uxth	r1, r3
 8004392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004396:	883a      	ldrh	r2, [r7, #0]
 8004398:	2401      	movs	r4, #1
 800439a:	9400      	str	r4, [sp, #0]
 800439c:	f7ff fd06 	bl	8003dac <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 80043a0:	89fb      	ldrh	r3, [r7, #14]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	b298      	uxth	r0, r3
 80043a8:	89bb      	ldrh	r3, [r7, #12]
 80043aa:	88ba      	ldrh	r2, [r7, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	b299      	uxth	r1, r3
 80043b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043b4:	883a      	ldrh	r2, [r7, #0]
 80043b6:	2401      	movs	r4, #1
 80043b8:	9400      	str	r4, [sp, #0]
 80043ba:	f7ff fcf7 	bl	8003dac <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 80043be:	89fa      	ldrh	r2, [r7, #14]
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	4413      	add	r3, r2
 80043c4:	b298      	uxth	r0, r3
 80043c6:	89bb      	ldrh	r3, [r7, #12]
 80043c8:	88ba      	ldrh	r2, [r7, #4]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	b299      	uxth	r1, r3
 80043ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043d2:	883a      	ldrh	r2, [r7, #0]
 80043d4:	2401      	movs	r4, #1
 80043d6:	9400      	str	r4, [sp, #0]
 80043d8:	f7ff fce8 	bl	8003dac <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 80043dc:	89ba      	ldrh	r2, [r7, #12]
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	4413      	add	r3, r2
 80043e2:	b298      	uxth	r0, r3
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	88ba      	ldrh	r2, [r7, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	b299      	uxth	r1, r3
 80043ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043f0:	883a      	ldrh	r2, [r7, #0]
 80043f2:	2401      	movs	r4, #1
 80043f4:	9400      	str	r4, [sp, #0]
 80043f6:	f7ff fcd9 	bl	8003dac <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 80043fa:	89ba      	ldrh	r2, [r7, #12]
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	4413      	add	r3, r2
 8004400:	b298      	uxth	r0, r3
 8004402:	89fa      	ldrh	r2, [r7, #14]
 8004404:	88bb      	ldrh	r3, [r7, #4]
 8004406:	4413      	add	r3, r2
 8004408:	b299      	uxth	r1, r3
 800440a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800440e:	883a      	ldrh	r2, [r7, #0]
 8004410:	2401      	movs	r4, #1
 8004412:	9400      	str	r4, [sp, #0]
 8004414:	f7ff fcca 	bl	8003dac <Paint_DrawPoint>

            if (Esp < 0 )
 8004418:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da09      	bge.n	8004434 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	b29a      	uxth	r2, r3
 8004426:	897b      	ldrh	r3, [r7, #10]
 8004428:	4413      	add	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	3306      	adds	r3, #6
 800442e:	b29b      	uxth	r3, r3
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	e013      	b.n	800445c <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8004434:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004438:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	b29a      	uxth	r2, r3
 8004444:	897b      	ldrh	r3, [r7, #10]
 8004446:	4413      	add	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	330a      	adds	r3, #10
 800444c:	b29b      	uxth	r3, r3
 800444e:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8004450:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29b      	uxth	r3, r3
 800445a:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800445c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004460:	b29b      	uxth	r3, r3
 8004462:	3301      	adds	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8004468:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800446c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	f77f af59 	ble.w	8004328 <Paint_DrawCircle+0x1c4>
        }
    }
}
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	bd90      	pop	{r4, r7, pc}

0800447c <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	4603      	mov	r3, r0
 8004486:	81fb      	strh	r3, [r7, #14]
 8004488:	460b      	mov	r3, r1
 800448a:	81bb      	strh	r3, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004490:	4b4c      	ldr	r3, [pc, #304]	@ (80045c4 <Paint_DrawChar+0x148>)
 8004492:	889b      	ldrh	r3, [r3, #4]
 8004494:	89fa      	ldrh	r2, [r7, #14]
 8004496:	429a      	cmp	r2, r3
 8004498:	d804      	bhi.n	80044a4 <Paint_DrawChar+0x28>
 800449a:	4b4a      	ldr	r3, [pc, #296]	@ (80045c4 <Paint_DrawChar+0x148>)
 800449c:	88db      	ldrh	r3, [r3, #6]
 800449e:	89ba      	ldrh	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d903      	bls.n	80044ac <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80044a4:	4848      	ldr	r0, [pc, #288]	@ (80045c8 <Paint_DrawChar+0x14c>)
 80044a6:	f000 fd19 	bl	8004edc <puts>
        return;
 80044aa:	e087      	b.n	80045bc <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	3b20      	subs	r3, #32
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	88d2      	ldrh	r2, [r2, #6]
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	8892      	ldrh	r2, [r2, #4]
 80044bc:	08d2      	lsrs	r2, r2, #3
 80044be:	b292      	uxth	r2, r2
 80044c0:	4611      	mov	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	8892      	ldrh	r2, [r2, #4]
 80044c6:	f002 0207 	and.w	r2, r2, #7
 80044ca:	b292      	uxth	r2, r2
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2201      	movne	r2, #1
 80044d2:	2200      	moveq	r2, #0
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	440a      	add	r2, r1
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	4413      	add	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80044e8:	2300      	movs	r3, #0
 80044ea:	83fb      	strh	r3, [r7, #30]
 80044ec:	e061      	b.n	80045b2 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80044ee:	2300      	movs	r3, #0
 80044f0:	83bb      	strh	r3, [r7, #28]
 80044f2:	e04c      	b.n	800458e <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80044f4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80044f6:	2bff      	cmp	r3, #255	@ 0xff
 80044f8:	d118      	bne.n	800452c <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	4619      	mov	r1, r3
 8004500:	8bbb      	ldrh	r3, [r7, #28]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2280      	movs	r2, #128	@ 0x80
 8004508:	fa42 f303 	asr.w	r3, r2, r3
 800450c:	400b      	ands	r3, r1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d031      	beq.n	8004576 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004512:	89fa      	ldrh	r2, [r7, #14]
 8004514:	8bbb      	ldrh	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	b298      	uxth	r0, r3
 800451a:	89ba      	ldrh	r2, [r7, #12]
 800451c:	8bfb      	ldrh	r3, [r7, #30]
 800451e:	4413      	add	r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004524:	4619      	mov	r1, r3
 8004526:	f7ff fa4d 	bl	80039c4 <Paint_SetPixel>
 800452a:	e024      	b.n	8004576 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	8bbb      	ldrh	r3, [r7, #28]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	2280      	movs	r2, #128	@ 0x80
 800453a:	fa42 f303 	asr.w	r3, r2, r3
 800453e:	400b      	ands	r3, r1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00c      	beq.n	800455e <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004544:	89fa      	ldrh	r2, [r7, #14]
 8004546:	8bbb      	ldrh	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	b298      	uxth	r0, r3
 800454c:	89ba      	ldrh	r2, [r7, #12]
 800454e:	8bfb      	ldrh	r3, [r7, #30]
 8004550:	4413      	add	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004556:	4619      	mov	r1, r3
 8004558:	f7ff fa34 	bl	80039c4 <Paint_SetPixel>
 800455c:	e00b      	b.n	8004576 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800455e:	89fa      	ldrh	r2, [r7, #14]
 8004560:	8bbb      	ldrh	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	b298      	uxth	r0, r3
 8004566:	89ba      	ldrh	r2, [r7, #12]
 8004568:	8bfb      	ldrh	r3, [r7, #30]
 800456a:	4413      	add	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004570:	4619      	mov	r1, r3
 8004572:	f7ff fa27 	bl	80039c4 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8004576:	8bbb      	ldrh	r3, [r7, #28]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b07      	cmp	r3, #7
 8004580:	d102      	bne.n	8004588 <Paint_DrawChar+0x10c>
                ptr++;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3301      	adds	r3, #1
 8004586:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004588:	8bbb      	ldrh	r3, [r7, #28]
 800458a:	3301      	adds	r3, #1
 800458c:	83bb      	strh	r3, [r7, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	889b      	ldrh	r3, [r3, #4]
 8004592:	8bba      	ldrh	r2, [r7, #28]
 8004594:	429a      	cmp	r2, r3
 8004596:	d3ad      	bcc.n	80044f4 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	889b      	ldrh	r3, [r3, #4]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <Paint_DrawChar+0x130>
            ptr++;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	3301      	adds	r3, #1
 80045aa:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80045ac:	8bfb      	ldrh	r3, [r7, #30]
 80045ae:	3301      	adds	r3, #1
 80045b0:	83fb      	strh	r3, [r7, #30]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	88db      	ldrh	r3, [r3, #6]
 80045b6:	8bfa      	ldrh	r2, [r7, #30]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d398      	bcc.n	80044ee <Paint_DrawChar+0x72>
    }// Write all
}
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200001ac 	.word	0x200001ac
 80045c8:	08005e30 	.word	0x08005e30

080045cc <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60ba      	str	r2, [r7, #8]
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	4603      	mov	r3, r0
 80045d8:	81fb      	strh	r3, [r7, #14]
 80045da:	460b      	mov	r3, r1
 80045dc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80045e2:	89bb      	ldrh	r3, [r7, #12]
 80045e4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80045e6:	4b21      	ldr	r3, [pc, #132]	@ (800466c <Paint_DrawString_EN+0xa0>)
 80045e8:	889b      	ldrh	r3, [r3, #4]
 80045ea:	89fa      	ldrh	r2, [r7, #14]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d804      	bhi.n	80045fa <Paint_DrawString_EN+0x2e>
 80045f0:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <Paint_DrawString_EN+0xa0>)
 80045f2:	88db      	ldrh	r3, [r3, #6]
 80045f4:	89ba      	ldrh	r2, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d931      	bls.n	800465e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80045fa:	481d      	ldr	r0, [pc, #116]	@ (8004670 <Paint_DrawString_EN+0xa4>)
 80045fc:	f000 fc6e 	bl	8004edc <puts>
        return;
 8004600:	e031      	b.n	8004666 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8004602:	8afb      	ldrh	r3, [r7, #22]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	8892      	ldrh	r2, [r2, #4]
 8004608:	4413      	add	r3, r2
 800460a:	4a18      	ldr	r2, [pc, #96]	@ (800466c <Paint_DrawString_EN+0xa0>)
 800460c:	8892      	ldrh	r2, [r2, #4]
 800460e:	4293      	cmp	r3, r2
 8004610:	dd06      	ble.n	8004620 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8004612:	89fb      	ldrh	r3, [r7, #14]
 8004614:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	88da      	ldrh	r2, [r3, #6]
 800461a:	8abb      	ldrh	r3, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8004620:	8abb      	ldrh	r3, [r7, #20]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	88d2      	ldrh	r2, [r2, #6]
 8004626:	4413      	add	r3, r2
 8004628:	4a10      	ldr	r2, [pc, #64]	@ (800466c <Paint_DrawString_EN+0xa0>)
 800462a:	88d2      	ldrh	r2, [r2, #6]
 800462c:	4293      	cmp	r3, r2
 800462e:	dd03      	ble.n	8004638 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004634:	89bb      	ldrh	r3, [r7, #12]
 8004636:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	8ab9      	ldrh	r1, [r7, #20]
 800463e:	8af8      	ldrh	r0, [r7, #22]
 8004640:	8c3b      	ldrh	r3, [r7, #32]
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f7ff ff17 	bl	800447c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	3301      	adds	r3, #1
 8004652:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	889a      	ldrh	r2, [r3, #4]
 8004658:	8afb      	ldrh	r3, [r7, #22]
 800465a:	4413      	add	r3, r2
 800465c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1cd      	bne.n	8004602 <Paint_DrawString_EN+0x36>
    }
}
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	200001ac 	.word	0x200001ac
 8004670:	08005e70 	.word	0x08005e70

08004674 <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	@ 0x30
 8004678:	af00      	add	r7, sp, #0
 800467a:	60ba      	str	r2, [r7, #8]
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	4603      	mov	r3, r0
 8004680:	81fb      	strh	r3, [r7, #14]
 8004682:	460b      	mov	r3, r1
 8004684:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int x = Xstart, y = Ystart;
 800468a:	89fb      	ldrh	r3, [r7, #14]
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800468e:	89bb      	ldrh	r3, [r7, #12]
 8004690:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8004692:	e166      	b.n	8004962 <Paint_DrawString_CN+0x2ee>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b25b      	sxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	f2c0 80aa 	blt.w	80047f4 <Paint_DrawString_CN+0x180>
            for(Num = 0; Num < font->size; Num++) {
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e095      	b.n	80047d2 <Paint_DrawString_CN+0x15e>
                if(*p_text== font->table[Num].index[0]) {
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	20a6      	movs	r0, #166	@ 0xa6
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	440b      	add	r3, r1
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	f040 8086 	bne.w	80047cc <Paint_DrawString_CN+0x158>
                    const char* ptr = &font->table[Num].matrix[0];
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	21a6      	movs	r1, #166	@ 0xa6
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	3302      	adds	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 80046d2:	2300      	movs	r3, #0
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	e072      	b.n	80047be <Paint_DrawString_CN+0x14a>
                        for (i = 0; i < font->Width; i++) {
 80046d8:	2300      	movs	r3, #0
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
 80046dc:	e05c      	b.n	8004798 <Paint_DrawString_CN+0x124>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80046de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046e0:	2bff      	cmp	r3, #255	@ 0xff
 80046e2:	d11c      	bne.n	800471e <Paint_DrawString_CN+0xaa>
                                if (*ptr & (0x80 >> (i % 8))) {
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	4619      	mov	r1, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	2280      	movs	r2, #128	@ 0x80
 80046f2:	fa42 f303 	asr.w	r3, r2, r3
 80046f6:	400b      	ands	r3, r1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d03d      	beq.n	8004778 <Paint_DrawString_CN+0x104>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80046fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	b29b      	uxth	r3, r3
 8004704:	4413      	add	r3, r2
 8004706:	b298      	uxth	r0, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	b29a      	uxth	r2, r3
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	b29b      	uxth	r3, r3
 8004710:	4413      	add	r3, r2
 8004712:	b29b      	uxth	r3, r3
 8004714:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004716:	4619      	mov	r1, r3
 8004718:	f7ff f954 	bl	80039c4 <Paint_SetPixel>
 800471c:	e02c      	b.n	8004778 <Paint_DrawString_CN+0x104>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	4619      	mov	r1, r3
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	2280      	movs	r2, #128	@ 0x80
 800472c:	fa42 f303 	asr.w	r3, r2, r3
 8004730:	400b      	ands	r3, r1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <Paint_DrawString_CN+0xe4>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	b29a      	uxth	r2, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	b29b      	uxth	r3, r3
 800473e:	4413      	add	r3, r2
 8004740:	b298      	uxth	r0, r3
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	b29a      	uxth	r2, r3
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	b29b      	uxth	r3, r3
 800474a:	4413      	add	r3, r2
 800474c:	b29b      	uxth	r3, r3
 800474e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004750:	4619      	mov	r1, r3
 8004752:	f7ff f937 	bl	80039c4 <Paint_SetPixel>
 8004756:	e00f      	b.n	8004778 <Paint_DrawString_CN+0x104>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	b29a      	uxth	r2, r3
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	b29b      	uxth	r3, r3
 8004760:	4413      	add	r3, r2
 8004762:	b298      	uxth	r0, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	b29a      	uxth	r2, r3
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	b29b      	uxth	r3, r3
 800476c:	4413      	add	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004772:	4619      	mov	r1, r3
 8004774:	f7ff f926 	bl	80039c4 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	425a      	negs	r2, r3
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	f002 0207 	and.w	r2, r2, #7
 8004784:	bf58      	it	pl
 8004786:	4253      	negpl	r3, r2
 8004788:	2b07      	cmp	r3, #7
 800478a:	d102      	bne.n	8004792 <Paint_DrawString_CN+0x11e>
                                ptr++;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	3301      	adds	r3, #1
 8004790:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	3301      	adds	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	891b      	ldrh	r3, [r3, #8]
 800479c:	461a      	mov	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	4293      	cmp	r3, r2
 80047a2:	db9c      	blt.n	80046de <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	891b      	ldrh	r3, [r3, #8]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <Paint_DrawString_CN+0x144>
                            ptr++;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	3301      	adds	r3, #1
 80047b6:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	3301      	adds	r3, #1
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	895b      	ldrh	r3, [r3, #10]
 80047c2:	461a      	mov	r2, r3
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	4293      	cmp	r3, r2
 80047c8:	db86      	blt.n	80046d8 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 80047ca:	e009      	b.n	80047e0 <Paint_DrawString_CN+0x16c>
            for(Num = 0; Num < font->size; Num++) {
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	3301      	adds	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	889b      	ldrh	r3, [r3, #4]
 80047d6:	461a      	mov	r2, r3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4293      	cmp	r3, r2
 80047dc:	f6ff af63 	blt.w	80046a6 <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	3301      	adds	r3, #1
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	88db      	ldrh	r3, [r3, #6]
 80047ea:	461a      	mov	r2, r3
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	4413      	add	r3, r2
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047f2:	e0b6      	b.n	8004962 <Paint_DrawString_CN+0x2ee>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	e0a3      	b.n	8004942 <Paint_DrawString_CN+0x2ce>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	20a6      	movs	r0, #166	@ 0xa6
 8004806:	fb00 f303 	mul.w	r3, r0, r3
 800480a:	440b      	add	r3, r1
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	f040 8094 	bne.w	800493c <Paint_DrawString_CN+0x2c8>
 8004814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004816:	3301      	adds	r3, #1
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	20a6      	movs	r0, #166	@ 0xa6
 8004822:	fb00 f303 	mul.w	r3, r0, r3
 8004826:	440b      	add	r3, r1
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	429a      	cmp	r2, r3
 800482c:	f040 8086 	bne.w	800493c <Paint_DrawString_CN+0x2c8>
                    const char* ptr = &font->table[Num].matrix[0];
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	21a6      	movs	r1, #166	@ 0xa6
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3302      	adds	r3, #2
 8004840:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
 8004846:	e072      	b.n	800492e <Paint_DrawString_CN+0x2ba>
                        for (i = 0; i < font->Width; i++) {
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
 800484c:	e05c      	b.n	8004908 <Paint_DrawString_CN+0x294>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800484e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004850:	2bff      	cmp	r3, #255	@ 0xff
 8004852:	d11c      	bne.n	800488e <Paint_DrawString_CN+0x21a>
                                if (*ptr & (0x80 >> (i % 8))) {
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	2280      	movs	r2, #128	@ 0x80
 8004862:	fa42 f303 	asr.w	r3, r2, r3
 8004866:	400b      	ands	r3, r1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d03d      	beq.n	80048e8 <Paint_DrawString_CN+0x274>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 800486c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486e:	b29a      	uxth	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	b29b      	uxth	r3, r3
 8004874:	4413      	add	r3, r2
 8004876:	b298      	uxth	r0, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	b29a      	uxth	r2, r3
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	b29b      	uxth	r3, r3
 8004880:	4413      	add	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004886:	4619      	mov	r1, r3
 8004888:	f7ff f89c 	bl	80039c4 <Paint_SetPixel>
 800488c:	e02c      	b.n	80048e8 <Paint_DrawString_CN+0x274>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	2280      	movs	r2, #128	@ 0x80
 800489c:	fa42 f303 	asr.w	r3, r2, r3
 80048a0:	400b      	ands	r3, r1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d010      	beq.n	80048c8 <Paint_DrawString_CN+0x254>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	b298      	uxth	r0, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80048c0:	4619      	mov	r1, r3
 80048c2:	f7ff f87f 	bl	80039c4 <Paint_SetPixel>
 80048c6:	e00f      	b.n	80048e8 <Paint_DrawString_CN+0x274>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	b298      	uxth	r0, r3
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4413      	add	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80048e2:	4619      	mov	r1, r3
 80048e4:	f7ff f86e 	bl	80039c4 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	425a      	negs	r2, r3
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	f002 0207 	and.w	r2, r2, #7
 80048f4:	bf58      	it	pl
 80048f6:	4253      	negpl	r3, r2
 80048f8:	2b07      	cmp	r3, #7
 80048fa:	d102      	bne.n	8004902 <Paint_DrawString_CN+0x28e>
                                ptr++;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3301      	adds	r3, #1
 8004900:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	3301      	adds	r3, #1
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	891b      	ldrh	r3, [r3, #8]
 800490c:	461a      	mov	r2, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	4293      	cmp	r3, r2
 8004912:	db9c      	blt.n	800484e <Paint_DrawString_CN+0x1da>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	891b      	ldrh	r3, [r3, #8]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <Paint_DrawString_CN+0x2b4>
                            ptr++;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3301      	adds	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	3301      	adds	r3, #1
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	895b      	ldrh	r3, [r3, #10]
 8004932:	461a      	mov	r2, r3
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	4293      	cmp	r3, r2
 8004938:	db86      	blt.n	8004848 <Paint_DrawString_CN+0x1d4>
                        }
                    }
                    break;
 800493a:	e009      	b.n	8004950 <Paint_DrawString_CN+0x2dc>
            for(Num = 0; Num < font->size; Num++) {
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3301      	adds	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	889b      	ldrh	r3, [r3, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4293      	cmp	r3, r2
 800494c:	f6ff af55 	blt.w	80047fa <Paint_DrawString_CN+0x186>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	3302      	adds	r3, #2
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	891b      	ldrh	r3, [r3, #8]
 800495a:	461a      	mov	r2, r3
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	4413      	add	r3, r2
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (*p_text != 0) {
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f47f ae94 	bne.w	8004694 <Paint_DrawString_CN+0x20>
        }
    }
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3730      	adds	r7, #48	@ 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800497e:	af02      	add	r7, sp, #8
 8004980:	4604      	mov	r4, r0
 8004982:	4608      	mov	r0, r1
 8004984:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8004988:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 800498c:	600a      	str	r2, [r1, #0]
 800498e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004992:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800499c:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80049a0:	4622      	mov	r2, r4
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80049a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80049ac:	4602      	mov	r2, r0
 80049ae:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 80049b6:	2300      	movs	r3, #0
 80049b8:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 80049bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80049c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	3304      	adds	r3, #4
 80049ca:	22fb      	movs	r2, #251	@ 0xfb
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fb64 	bl	800509c <memset>
 80049d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80049d8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	3304      	adds	r3, #4
 80049e2:	22fb      	movs	r2, #251	@ 0xfb
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fb58 	bl	800509c <memset>
    uint8_t *pStr = Str_Array;
 80049ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049f0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80049f4:	4b46      	ldr	r3, [pc, #280]	@ (8004b10 <Paint_DrawNum+0x198>)
 80049f6:	889b      	ldrh	r3, [r3, #4]
 80049f8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80049fc:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 8004a00:	8812      	ldrh	r2, [r2, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d808      	bhi.n	8004a18 <Paint_DrawNum+0xa0>
 8004a06:	4b42      	ldr	r3, [pc, #264]	@ (8004b10 <Paint_DrawNum+0x198>)
 8004a08:	88db      	ldrh	r3, [r3, #6]
 8004a0a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004a0e:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d903      	bls.n	8004a20 <Paint_DrawNum+0xa8>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8004a18:	483e      	ldr	r0, [pc, #248]	@ (8004b14 <Paint_DrawNum+0x19c>)
 8004a1a:	f000 fa5f 	bl	8004edc <puts>
 8004a1e:	e072      	b.n	8004b06 <Paint_DrawNum+0x18e>
        return;
    }

    //Converts a number to a string
    do {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8004a20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004a24:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <Paint_DrawNum+0x1a0>)
 8004a2c:	fb83 1302 	smull	r1, r3, r3, r2
 8004a30:	1099      	asrs	r1, r3, #2
 8004a32:	17d3      	asrs	r3, r2, #31
 8004a34:	1ac9      	subs	r1, r1, r3
 8004a36:	460b      	mov	r3, r1
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	1ad1      	subs	r1, r2, r3
 8004a40:	b2ca      	uxtb	r2, r1
 8004a42:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8004a46:	3230      	adds	r2, #48	@ 0x30
 8004a48:	b2d1      	uxtb	r1, r2
 8004a4a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004a4e:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8004a52:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8004a54:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        Nummber /= 10;
 8004a62:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004a66:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004a6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004a6e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4928      	ldr	r1, [pc, #160]	@ (8004b18 <Paint_DrawNum+0x1a0>)
 8004a76:	fb81 0103 	smull	r0, r1, r1, r3
 8004a7a:	1089      	asrs	r1, r1, #2
 8004a7c:	17db      	asrs	r3, r3, #31
 8004a7e:	1acb      	subs	r3, r1, r3
 8004a80:	6013      	str	r3, [r2, #0]
    } while(Nummber);
 8004a82:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004a86:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1c7      	bne.n	8004a20 <Paint_DrawNum+0xa8>
    

    //The string is inverted
    while (Num_Bit > 0) {
 8004a90:	e01c      	b.n	8004acc <Paint_DrawNum+0x154>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8004a92:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8004a96:	1e5a      	subs	r2, r3, #1
 8004a98:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8004a9c:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8004aa0:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 8004aa4:	5c89      	ldrb	r1, [r1, r2]
 8004aa6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004aaa:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8004aae:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 8004ab0:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
        Num_Bit --;
 8004abe:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    while (Num_Bit > 0) {
 8004acc:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	dcde      	bgt.n	8004a92 <Paint_DrawNum+0x11a>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 8004ad4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ad8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004adc:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004ae0:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8004ae4:	8811      	ldrh	r1, [r2, #0]
 8004ae6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004aea:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 8004aee:	8810      	ldrh	r0, [r2, #0]
 8004af0:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 8004af4:	9201      	str	r2, [sp, #4]
 8004af6:	f8b7 222c 	ldrh.w	r2, [r7, #556]	@ 0x22c
 8004afa:	9200      	str	r2, [sp, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8004b02:	f7ff fd63 	bl	80045cc <Paint_DrawString_EN>
}
 8004b06:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200001ac 	.word	0x200001ac
 8004b14:	08005eb4 	.word	0x08005eb4
 8004b18:	66666667 	.word	0x66666667

08004b1c <malloc>:
 8004b1c:	4b02      	ldr	r3, [pc, #8]	@ (8004b28 <malloc+0xc>)
 8004b1e:	4601      	mov	r1, r0
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	f000 b825 	b.w	8004b70 <_malloc_r>
 8004b26:	bf00      	nop
 8004b28:	20000040 	.word	0x20000040

08004b2c <sbrk_aligned>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b6c <sbrk_aligned+0x40>)
 8004b30:	460c      	mov	r4, r1
 8004b32:	6831      	ldr	r1, [r6, #0]
 8004b34:	4605      	mov	r5, r0
 8004b36:	b911      	cbnz	r1, 8004b3e <sbrk_aligned+0x12>
 8004b38:	f000 faec 	bl	8005114 <_sbrk_r>
 8004b3c:	6030      	str	r0, [r6, #0]
 8004b3e:	4621      	mov	r1, r4
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 fae7 	bl	8005114 <_sbrk_r>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	d103      	bne.n	8004b52 <sbrk_aligned+0x26>
 8004b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b4e:	4620      	mov	r0, r4
 8004b50:	bd70      	pop	{r4, r5, r6, pc}
 8004b52:	1cc4      	adds	r4, r0, #3
 8004b54:	f024 0403 	bic.w	r4, r4, #3
 8004b58:	42a0      	cmp	r0, r4
 8004b5a:	d0f8      	beq.n	8004b4e <sbrk_aligned+0x22>
 8004b5c:	1a21      	subs	r1, r4, r0
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 fad8 	bl	8005114 <_sbrk_r>
 8004b64:	3001      	adds	r0, #1
 8004b66:	d1f2      	bne.n	8004b4e <sbrk_aligned+0x22>
 8004b68:	e7ef      	b.n	8004b4a <sbrk_aligned+0x1e>
 8004b6a:	bf00      	nop
 8004b6c:	200001c4 	.word	0x200001c4

08004b70 <_malloc_r>:
 8004b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b74:	1ccd      	adds	r5, r1, #3
 8004b76:	f025 0503 	bic.w	r5, r5, #3
 8004b7a:	3508      	adds	r5, #8
 8004b7c:	2d0c      	cmp	r5, #12
 8004b7e:	bf38      	it	cc
 8004b80:	250c      	movcc	r5, #12
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	4606      	mov	r6, r0
 8004b86:	db01      	blt.n	8004b8c <_malloc_r+0x1c>
 8004b88:	42a9      	cmp	r1, r5
 8004b8a:	d904      	bls.n	8004b96 <_malloc_r+0x26>
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	2000      	movs	r0, #0
 8004b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c6c <_malloc_r+0xfc>
 8004b9a:	f000 f869 	bl	8004c70 <__malloc_lock>
 8004b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba2:	461c      	mov	r4, r3
 8004ba4:	bb44      	cbnz	r4, 8004bf8 <_malloc_r+0x88>
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7ff ffbf 	bl	8004b2c <sbrk_aligned>
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	d158      	bne.n	8004c66 <_malloc_r+0xf6>
 8004bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8004bb8:	4627      	mov	r7, r4
 8004bba:	2f00      	cmp	r7, #0
 8004bbc:	d143      	bne.n	8004c46 <_malloc_r+0xd6>
 8004bbe:	2c00      	cmp	r4, #0
 8004bc0:	d04b      	beq.n	8004c5a <_malloc_r+0xea>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	4639      	mov	r1, r7
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	eb04 0903 	add.w	r9, r4, r3
 8004bcc:	f000 faa2 	bl	8005114 <_sbrk_r>
 8004bd0:	4581      	cmp	r9, r0
 8004bd2:	d142      	bne.n	8004c5a <_malloc_r+0xea>
 8004bd4:	6821      	ldr	r1, [r4, #0]
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	1a6d      	subs	r5, r5, r1
 8004bda:	4629      	mov	r1, r5
 8004bdc:	f7ff ffa6 	bl	8004b2c <sbrk_aligned>
 8004be0:	3001      	adds	r0, #1
 8004be2:	d03a      	beq.n	8004c5a <_malloc_r+0xea>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	442b      	add	r3, r5
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	f8d8 3000 	ldr.w	r3, [r8]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	bb62      	cbnz	r2, 8004c4c <_malloc_r+0xdc>
 8004bf2:	f8c8 7000 	str.w	r7, [r8]
 8004bf6:	e00f      	b.n	8004c18 <_malloc_r+0xa8>
 8004bf8:	6822      	ldr	r2, [r4, #0]
 8004bfa:	1b52      	subs	r2, r2, r5
 8004bfc:	d420      	bmi.n	8004c40 <_malloc_r+0xd0>
 8004bfe:	2a0b      	cmp	r2, #11
 8004c00:	d917      	bls.n	8004c32 <_malloc_r+0xc2>
 8004c02:	1961      	adds	r1, r4, r5
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	6025      	str	r5, [r4, #0]
 8004c08:	bf18      	it	ne
 8004c0a:	6059      	strne	r1, [r3, #4]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	bf08      	it	eq
 8004c10:	f8c8 1000 	streq.w	r1, [r8]
 8004c14:	5162      	str	r2, [r4, r5]
 8004c16:	604b      	str	r3, [r1, #4]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f82f 	bl	8004c7c <__malloc_unlock>
 8004c1e:	f104 000b 	add.w	r0, r4, #11
 8004c22:	1d23      	adds	r3, r4, #4
 8004c24:	f020 0007 	bic.w	r0, r0, #7
 8004c28:	1ac2      	subs	r2, r0, r3
 8004c2a:	bf1c      	itt	ne
 8004c2c:	1a1b      	subne	r3, r3, r0
 8004c2e:	50a3      	strne	r3, [r4, r2]
 8004c30:	e7af      	b.n	8004b92 <_malloc_r+0x22>
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	bf0c      	ite	eq
 8004c38:	f8c8 2000 	streq.w	r2, [r8]
 8004c3c:	605a      	strne	r2, [r3, #4]
 8004c3e:	e7eb      	b.n	8004c18 <_malloc_r+0xa8>
 8004c40:	4623      	mov	r3, r4
 8004c42:	6864      	ldr	r4, [r4, #4]
 8004c44:	e7ae      	b.n	8004ba4 <_malloc_r+0x34>
 8004c46:	463c      	mov	r4, r7
 8004c48:	687f      	ldr	r7, [r7, #4]
 8004c4a:	e7b6      	b.n	8004bba <_malloc_r+0x4a>
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d1fb      	bne.n	8004c4c <_malloc_r+0xdc>
 8004c54:	2300      	movs	r3, #0
 8004c56:	6053      	str	r3, [r2, #4]
 8004c58:	e7de      	b.n	8004c18 <_malloc_r+0xa8>
 8004c5a:	230c      	movs	r3, #12
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	6033      	str	r3, [r6, #0]
 8004c60:	f000 f80c 	bl	8004c7c <__malloc_unlock>
 8004c64:	e794      	b.n	8004b90 <_malloc_r+0x20>
 8004c66:	6005      	str	r5, [r0, #0]
 8004c68:	e7d6      	b.n	8004c18 <_malloc_r+0xa8>
 8004c6a:	bf00      	nop
 8004c6c:	200001c8 	.word	0x200001c8

08004c70 <__malloc_lock>:
 8004c70:	4801      	ldr	r0, [pc, #4]	@ (8004c78 <__malloc_lock+0x8>)
 8004c72:	f000 ba9c 	b.w	80051ae <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	2000030c 	.word	0x2000030c

08004c7c <__malloc_unlock>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	@ (8004c84 <__malloc_unlock+0x8>)
 8004c7e:	f000 ba97 	b.w	80051b0 <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	2000030c 	.word	0x2000030c

08004c88 <std>:
 8004c88:	2300      	movs	r3, #0
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c96:	6083      	str	r3, [r0, #8]
 8004c98:	8181      	strh	r1, [r0, #12]
 8004c9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c9c:	81c2      	strh	r2, [r0, #14]
 8004c9e:	6183      	str	r3, [r0, #24]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	2208      	movs	r2, #8
 8004ca4:	305c      	adds	r0, #92	@ 0x5c
 8004ca6:	f000 f9f9 	bl	800509c <memset>
 8004caa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <std+0x58>)
 8004cac:	6224      	str	r4, [r4, #32]
 8004cae:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <std+0x5c>)
 8004cb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <std+0x60>)
 8004cb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <std+0x64>)
 8004cba:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf0 <std+0x68>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	d006      	beq.n	8004cd0 <std+0x48>
 8004cc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cc6:	4294      	cmp	r4, r2
 8004cc8:	d002      	beq.n	8004cd0 <std+0x48>
 8004cca:	33d0      	adds	r3, #208	@ 0xd0
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	d105      	bne.n	8004cdc <std+0x54>
 8004cd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd8:	f000 ba68 	b.w	80051ac <__retarget_lock_init_recursive>
 8004cdc:	bd10      	pop	{r4, pc}
 8004cde:	bf00      	nop
 8004ce0:	08004eed 	.word	0x08004eed
 8004ce4:	08004f0f 	.word	0x08004f0f
 8004ce8:	08004f47 	.word	0x08004f47
 8004cec:	08004f6b 	.word	0x08004f6b
 8004cf0:	200001cc 	.word	0x200001cc

08004cf4 <stdio_exit_handler>:
 8004cf4:	4a02      	ldr	r2, [pc, #8]	@ (8004d00 <stdio_exit_handler+0xc>)
 8004cf6:	4903      	ldr	r1, [pc, #12]	@ (8004d04 <stdio_exit_handler+0x10>)
 8004cf8:	4803      	ldr	r0, [pc, #12]	@ (8004d08 <stdio_exit_handler+0x14>)
 8004cfa:	f000 b869 	b.w	8004dd0 <_fwalk_sglue>
 8004cfe:	bf00      	nop
 8004d00:	20000034 	.word	0x20000034
 8004d04:	080058e9 	.word	0x080058e9
 8004d08:	20000044 	.word	0x20000044

08004d0c <cleanup_stdio>:
 8004d0c:	6841      	ldr	r1, [r0, #4]
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <cleanup_stdio+0x34>)
 8004d10:	b510      	push	{r4, lr}
 8004d12:	4299      	cmp	r1, r3
 8004d14:	4604      	mov	r4, r0
 8004d16:	d001      	beq.n	8004d1c <cleanup_stdio+0x10>
 8004d18:	f000 fde6 	bl	80058e8 <_fflush_r>
 8004d1c:	68a1      	ldr	r1, [r4, #8]
 8004d1e:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <cleanup_stdio+0x38>)
 8004d20:	4299      	cmp	r1, r3
 8004d22:	d002      	beq.n	8004d2a <cleanup_stdio+0x1e>
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 fddf 	bl	80058e8 <_fflush_r>
 8004d2a:	68e1      	ldr	r1, [r4, #12]
 8004d2c:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <cleanup_stdio+0x3c>)
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	d004      	beq.n	8004d3c <cleanup_stdio+0x30>
 8004d32:	4620      	mov	r0, r4
 8004d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d38:	f000 bdd6 	b.w	80058e8 <_fflush_r>
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	200001cc 	.word	0x200001cc
 8004d44:	20000234 	.word	0x20000234
 8004d48:	2000029c 	.word	0x2000029c

08004d4c <global_stdio_init.part.0>:
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d7c <global_stdio_init.part.0+0x30>)
 8004d50:	4c0b      	ldr	r4, [pc, #44]	@ (8004d80 <global_stdio_init.part.0+0x34>)
 8004d52:	4a0c      	ldr	r2, [pc, #48]	@ (8004d84 <global_stdio_init.part.0+0x38>)
 8004d54:	4620      	mov	r0, r4
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	2104      	movs	r1, #4
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f7ff ff94 	bl	8004c88 <std>
 8004d60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d64:	2201      	movs	r2, #1
 8004d66:	2109      	movs	r1, #9
 8004d68:	f7ff ff8e 	bl	8004c88 <std>
 8004d6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d70:	2202      	movs	r2, #2
 8004d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d76:	2112      	movs	r1, #18
 8004d78:	f7ff bf86 	b.w	8004c88 <std>
 8004d7c:	20000304 	.word	0x20000304
 8004d80:	200001cc 	.word	0x200001cc
 8004d84:	08004cf5 	.word	0x08004cf5

08004d88 <__sfp_lock_acquire>:
 8004d88:	4801      	ldr	r0, [pc, #4]	@ (8004d90 <__sfp_lock_acquire+0x8>)
 8004d8a:	f000 ba10 	b.w	80051ae <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	2000030d 	.word	0x2000030d

08004d94 <__sfp_lock_release>:
 8004d94:	4801      	ldr	r0, [pc, #4]	@ (8004d9c <__sfp_lock_release+0x8>)
 8004d96:	f000 ba0b 	b.w	80051b0 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	2000030d 	.word	0x2000030d

08004da0 <__sinit>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4604      	mov	r4, r0
 8004da4:	f7ff fff0 	bl	8004d88 <__sfp_lock_acquire>
 8004da8:	6a23      	ldr	r3, [r4, #32]
 8004daa:	b11b      	cbz	r3, 8004db4 <__sinit+0x14>
 8004dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db0:	f7ff bff0 	b.w	8004d94 <__sfp_lock_release>
 8004db4:	4b04      	ldr	r3, [pc, #16]	@ (8004dc8 <__sinit+0x28>)
 8004db6:	6223      	str	r3, [r4, #32]
 8004db8:	4b04      	ldr	r3, [pc, #16]	@ (8004dcc <__sinit+0x2c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f5      	bne.n	8004dac <__sinit+0xc>
 8004dc0:	f7ff ffc4 	bl	8004d4c <global_stdio_init.part.0>
 8004dc4:	e7f2      	b.n	8004dac <__sinit+0xc>
 8004dc6:	bf00      	nop
 8004dc8:	08004d0d 	.word	0x08004d0d
 8004dcc:	20000304 	.word	0x20000304

08004dd0 <_fwalk_sglue>:
 8004dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	4688      	mov	r8, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	2600      	movs	r6, #0
 8004ddc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004de0:	f1b9 0901 	subs.w	r9, r9, #1
 8004de4:	d505      	bpl.n	8004df2 <_fwalk_sglue+0x22>
 8004de6:	6824      	ldr	r4, [r4, #0]
 8004de8:	2c00      	cmp	r4, #0
 8004dea:	d1f7      	bne.n	8004ddc <_fwalk_sglue+0xc>
 8004dec:	4630      	mov	r0, r6
 8004dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df2:	89ab      	ldrh	r3, [r5, #12]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d907      	bls.n	8004e08 <_fwalk_sglue+0x38>
 8004df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	d003      	beq.n	8004e08 <_fwalk_sglue+0x38>
 8004e00:	4629      	mov	r1, r5
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c0      	blx	r8
 8004e06:	4306      	orrs	r6, r0
 8004e08:	3568      	adds	r5, #104	@ 0x68
 8004e0a:	e7e9      	b.n	8004de0 <_fwalk_sglue+0x10>

08004e0c <iprintf>:
 8004e0c:	b40f      	push	{r0, r1, r2, r3}
 8004e0e:	b507      	push	{r0, r1, r2, lr}
 8004e10:	4906      	ldr	r1, [pc, #24]	@ (8004e2c <iprintf+0x20>)
 8004e12:	ab04      	add	r3, sp, #16
 8004e14:	6808      	ldr	r0, [r1, #0]
 8004e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1a:	6881      	ldr	r1, [r0, #8]
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	f000 fa39 	bl	8005294 <_vfiprintf_r>
 8004e22:	b003      	add	sp, #12
 8004e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e28:	b004      	add	sp, #16
 8004e2a:	4770      	bx	lr
 8004e2c:	20000040 	.word	0x20000040

08004e30 <_puts_r>:
 8004e30:	6a03      	ldr	r3, [r0, #32]
 8004e32:	b570      	push	{r4, r5, r6, lr}
 8004e34:	4605      	mov	r5, r0
 8004e36:	460e      	mov	r6, r1
 8004e38:	6884      	ldr	r4, [r0, #8]
 8004e3a:	b90b      	cbnz	r3, 8004e40 <_puts_r+0x10>
 8004e3c:	f7ff ffb0 	bl	8004da0 <__sinit>
 8004e40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e42:	07db      	lsls	r3, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_puts_r+0x22>
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	0598      	lsls	r0, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_puts_r+0x22>
 8004e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e4e:	f000 f9ae 	bl	80051ae <__retarget_lock_acquire_recursive>
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	0719      	lsls	r1, r3, #28
 8004e56:	d502      	bpl.n	8004e5e <_puts_r+0x2e>
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d135      	bne.n	8004eca <_puts_r+0x9a>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 f8c5 	bl	8004ff0 <__swsetup_r>
 8004e66:	b380      	cbz	r0, 8004eca <_puts_r+0x9a>
 8004e68:	f04f 35ff 	mov.w	r5, #4294967295
 8004e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e6e:	07da      	lsls	r2, r3, #31
 8004e70:	d405      	bmi.n	8004e7e <_puts_r+0x4e>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	059b      	lsls	r3, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_puts_r+0x4e>
 8004e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e7a:	f000 f999 	bl	80051b0 <__retarget_lock_release_recursive>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da04      	bge.n	8004e90 <_puts_r+0x60>
 8004e86:	69a2      	ldr	r2, [r4, #24]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	dc17      	bgt.n	8004ebc <_puts_r+0x8c>
 8004e8c:	290a      	cmp	r1, #10
 8004e8e:	d015      	beq.n	8004ebc <_puts_r+0x8c>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	6022      	str	r2, [r4, #0]
 8004e96:	7019      	strb	r1, [r3, #0]
 8004e98:	68a3      	ldr	r3, [r4, #8]
 8004e9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	60a3      	str	r3, [r4, #8]
 8004ea2:	2900      	cmp	r1, #0
 8004ea4:	d1ed      	bne.n	8004e82 <_puts_r+0x52>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da11      	bge.n	8004ece <_puts_r+0x9e>
 8004eaa:	4622      	mov	r2, r4
 8004eac:	210a      	movs	r1, #10
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 f85f 	bl	8004f72 <__swbuf_r>
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d0d7      	beq.n	8004e68 <_puts_r+0x38>
 8004eb8:	250a      	movs	r5, #10
 8004eba:	e7d7      	b.n	8004e6c <_puts_r+0x3c>
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 f857 	bl	8004f72 <__swbuf_r>
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d1e7      	bne.n	8004e98 <_puts_r+0x68>
 8004ec8:	e7ce      	b.n	8004e68 <_puts_r+0x38>
 8004eca:	3e01      	subs	r6, #1
 8004ecc:	e7e4      	b.n	8004e98 <_puts_r+0x68>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	6022      	str	r2, [r4, #0]
 8004ed4:	220a      	movs	r2, #10
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e7ee      	b.n	8004eb8 <_puts_r+0x88>
	...

08004edc <puts>:
 8004edc:	4b02      	ldr	r3, [pc, #8]	@ (8004ee8 <puts+0xc>)
 8004ede:	4601      	mov	r1, r0
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f7ff bfa5 	b.w	8004e30 <_puts_r>
 8004ee6:	bf00      	nop
 8004ee8:	20000040 	.word	0x20000040

08004eec <__sread>:
 8004eec:	b510      	push	{r4, lr}
 8004eee:	460c      	mov	r4, r1
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	f000 f8fc 	bl	80050f0 <_read_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	bfab      	itete	ge
 8004efc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004efe:	89a3      	ldrhlt	r3, [r4, #12]
 8004f00:	181b      	addge	r3, r3, r0
 8004f02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f06:	bfac      	ite	ge
 8004f08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f0a:	81a3      	strhlt	r3, [r4, #12]
 8004f0c:	bd10      	pop	{r4, pc}

08004f0e <__swrite>:
 8004f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f12:	461f      	mov	r7, r3
 8004f14:	898b      	ldrh	r3, [r1, #12]
 8004f16:	4605      	mov	r5, r0
 8004f18:	05db      	lsls	r3, r3, #23
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	d505      	bpl.n	8004f2c <__swrite+0x1e>
 8004f20:	2302      	movs	r3, #2
 8004f22:	2200      	movs	r2, #0
 8004f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f28:	f000 f8d0 	bl	80050cc <_lseek_r>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	4632      	mov	r2, r6
 8004f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	4628      	mov	r0, r5
 8004f38:	463b      	mov	r3, r7
 8004f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f42:	f000 b8f7 	b.w	8005134 <_write_r>

08004f46 <__sseek>:
 8004f46:	b510      	push	{r4, lr}
 8004f48:	460c      	mov	r4, r1
 8004f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4e:	f000 f8bd 	bl	80050cc <_lseek_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	bf15      	itete	ne
 8004f58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f62:	81a3      	strheq	r3, [r4, #12]
 8004f64:	bf18      	it	ne
 8004f66:	81a3      	strhne	r3, [r4, #12]
 8004f68:	bd10      	pop	{r4, pc}

08004f6a <__sclose>:
 8004f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6e:	f000 b89d 	b.w	80050ac <_close_r>

08004f72 <__swbuf_r>:
 8004f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f74:	460e      	mov	r6, r1
 8004f76:	4614      	mov	r4, r2
 8004f78:	4605      	mov	r5, r0
 8004f7a:	b118      	cbz	r0, 8004f84 <__swbuf_r+0x12>
 8004f7c:	6a03      	ldr	r3, [r0, #32]
 8004f7e:	b90b      	cbnz	r3, 8004f84 <__swbuf_r+0x12>
 8004f80:	f7ff ff0e 	bl	8004da0 <__sinit>
 8004f84:	69a3      	ldr	r3, [r4, #24]
 8004f86:	60a3      	str	r3, [r4, #8]
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	071a      	lsls	r2, r3, #28
 8004f8c:	d501      	bpl.n	8004f92 <__swbuf_r+0x20>
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	b943      	cbnz	r3, 8004fa4 <__swbuf_r+0x32>
 8004f92:	4621      	mov	r1, r4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 f82b 	bl	8004ff0 <__swsetup_r>
 8004f9a:	b118      	cbz	r0, 8004fa4 <__swbuf_r+0x32>
 8004f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	6922      	ldr	r2, [r4, #16]
 8004fa8:	b2f6      	uxtb	r6, r6
 8004faa:	1a98      	subs	r0, r3, r2
 8004fac:	6963      	ldr	r3, [r4, #20]
 8004fae:	4637      	mov	r7, r6
 8004fb0:	4283      	cmp	r3, r0
 8004fb2:	dc05      	bgt.n	8004fc0 <__swbuf_r+0x4e>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 fc96 	bl	80058e8 <_fflush_r>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d1ed      	bne.n	8004f9c <__swbuf_r+0x2a>
 8004fc0:	68a3      	ldr	r3, [r4, #8]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	60a3      	str	r3, [r4, #8]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	701e      	strb	r6, [r3, #0]
 8004fce:	6962      	ldr	r2, [r4, #20]
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d004      	beq.n	8004fe0 <__swbuf_r+0x6e>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	07db      	lsls	r3, r3, #31
 8004fda:	d5e1      	bpl.n	8004fa0 <__swbuf_r+0x2e>
 8004fdc:	2e0a      	cmp	r6, #10
 8004fde:	d1df      	bne.n	8004fa0 <__swbuf_r+0x2e>
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f000 fc80 	bl	80058e8 <_fflush_r>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d0d9      	beq.n	8004fa0 <__swbuf_r+0x2e>
 8004fec:	e7d6      	b.n	8004f9c <__swbuf_r+0x2a>
	...

08004ff0 <__swsetup_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4b29      	ldr	r3, [pc, #164]	@ (8005098 <__swsetup_r+0xa8>)
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	b118      	cbz	r0, 8005004 <__swsetup_r+0x14>
 8004ffc:	6a03      	ldr	r3, [r0, #32]
 8004ffe:	b90b      	cbnz	r3, 8005004 <__swsetup_r+0x14>
 8005000:	f7ff fece 	bl	8004da0 <__sinit>
 8005004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005008:	0719      	lsls	r1, r3, #28
 800500a:	d422      	bmi.n	8005052 <__swsetup_r+0x62>
 800500c:	06da      	lsls	r2, r3, #27
 800500e:	d407      	bmi.n	8005020 <__swsetup_r+0x30>
 8005010:	2209      	movs	r2, #9
 8005012:	602a      	str	r2, [r5, #0]
 8005014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	e033      	b.n	8005088 <__swsetup_r+0x98>
 8005020:	0758      	lsls	r0, r3, #29
 8005022:	d512      	bpl.n	800504a <__swsetup_r+0x5a>
 8005024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005026:	b141      	cbz	r1, 800503a <__swsetup_r+0x4a>
 8005028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800502c:	4299      	cmp	r1, r3
 800502e:	d002      	beq.n	8005036 <__swsetup_r+0x46>
 8005030:	4628      	mov	r0, r5
 8005032:	f000 f8bf 	bl	80051b4 <_free_r>
 8005036:	2300      	movs	r3, #0
 8005038:	6363      	str	r3, [r4, #52]	@ 0x34
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	2300      	movs	r3, #0
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	f043 0308 	orr.w	r3, r3, #8
 8005050:	81a3      	strh	r3, [r4, #12]
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	b94b      	cbnz	r3, 800506a <__swsetup_r+0x7a>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800505c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005060:	d003      	beq.n	800506a <__swsetup_r+0x7a>
 8005062:	4621      	mov	r1, r4
 8005064:	4628      	mov	r0, r5
 8005066:	f000 fc8c 	bl	8005982 <__smakebuf_r>
 800506a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506e:	f013 0201 	ands.w	r2, r3, #1
 8005072:	d00a      	beq.n	800508a <__swsetup_r+0x9a>
 8005074:	2200      	movs	r2, #0
 8005076:	60a2      	str	r2, [r4, #8]
 8005078:	6962      	ldr	r2, [r4, #20]
 800507a:	4252      	negs	r2, r2
 800507c:	61a2      	str	r2, [r4, #24]
 800507e:	6922      	ldr	r2, [r4, #16]
 8005080:	b942      	cbnz	r2, 8005094 <__swsetup_r+0xa4>
 8005082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005086:	d1c5      	bne.n	8005014 <__swsetup_r+0x24>
 8005088:	bd38      	pop	{r3, r4, r5, pc}
 800508a:	0799      	lsls	r1, r3, #30
 800508c:	bf58      	it	pl
 800508e:	6962      	ldrpl	r2, [r4, #20]
 8005090:	60a2      	str	r2, [r4, #8]
 8005092:	e7f4      	b.n	800507e <__swsetup_r+0x8e>
 8005094:	2000      	movs	r0, #0
 8005096:	e7f7      	b.n	8005088 <__swsetup_r+0x98>
 8005098:	20000040 	.word	0x20000040

0800509c <memset>:
 800509c:	4603      	mov	r3, r0
 800509e:	4402      	add	r2, r0
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d100      	bne.n	80050a6 <memset+0xa>
 80050a4:	4770      	bx	lr
 80050a6:	f803 1b01 	strb.w	r1, [r3], #1
 80050aa:	e7f9      	b.n	80050a0 <memset+0x4>

080050ac <_close_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	2300      	movs	r3, #0
 80050b0:	4d05      	ldr	r5, [pc, #20]	@ (80050c8 <_close_r+0x1c>)
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fb fbaf 	bl	800081a <_close>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_close_r+0x1a>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_close_r+0x1a>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000308 	.word	0x20000308

080050cc <_lseek_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	2200      	movs	r2, #0
 80050d6:	4d05      	ldr	r5, [pc, #20]	@ (80050ec <_lseek_r+0x20>)
 80050d8:	602a      	str	r2, [r5, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7fb fbc1 	bl	8000862 <_lseek>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_lseek_r+0x1e>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_lseek_r+0x1e>
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20000308 	.word	0x20000308

080050f0 <_read_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	2200      	movs	r2, #0
 80050fa:	4d05      	ldr	r5, [pc, #20]	@ (8005110 <_read_r+0x20>)
 80050fc:	602a      	str	r2, [r5, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fb fb52 	bl	80007a8 <_read>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_read_r+0x1e>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	b103      	cbz	r3, 800510e <_read_r+0x1e>
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000308 	.word	0x20000308

08005114 <_sbrk_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	2300      	movs	r3, #0
 8005118:	4d05      	ldr	r5, [pc, #20]	@ (8005130 <_sbrk_r+0x1c>)
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	f7fb fbac 	bl	800087c <_sbrk>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_sbrk_r+0x1a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_sbrk_r+0x1a>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20000308 	.word	0x20000308

08005134 <_write_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4604      	mov	r4, r0
 8005138:	4608      	mov	r0, r1
 800513a:	4611      	mov	r1, r2
 800513c:	2200      	movs	r2, #0
 800513e:	4d05      	ldr	r5, [pc, #20]	@ (8005154 <_write_r+0x20>)
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f7fb fb4d 	bl	80007e2 <_write>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_write_r+0x1e>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_write_r+0x1e>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20000308 	.word	0x20000308

08005158 <__errno>:
 8005158:	4b01      	ldr	r3, [pc, #4]	@ (8005160 <__errno+0x8>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000040 	.word	0x20000040

08005164 <__libc_init_array>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	2600      	movs	r6, #0
 8005168:	4d0c      	ldr	r5, [pc, #48]	@ (800519c <__libc_init_array+0x38>)
 800516a:	4c0d      	ldr	r4, [pc, #52]	@ (80051a0 <__libc_init_array+0x3c>)
 800516c:	1b64      	subs	r4, r4, r5
 800516e:	10a4      	asrs	r4, r4, #2
 8005170:	42a6      	cmp	r6, r4
 8005172:	d109      	bne.n	8005188 <__libc_init_array+0x24>
 8005174:	f000 fc72 	bl	8005a5c <_init>
 8005178:	2600      	movs	r6, #0
 800517a:	4d0a      	ldr	r5, [pc, #40]	@ (80051a4 <__libc_init_array+0x40>)
 800517c:	4c0a      	ldr	r4, [pc, #40]	@ (80051a8 <__libc_init_array+0x44>)
 800517e:	1b64      	subs	r4, r4, r5
 8005180:	10a4      	asrs	r4, r4, #2
 8005182:	42a6      	cmp	r6, r4
 8005184:	d105      	bne.n	8005192 <__libc_init_array+0x2e>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	f855 3b04 	ldr.w	r3, [r5], #4
 800518c:	4798      	blx	r3
 800518e:	3601      	adds	r6, #1
 8005190:	e7ee      	b.n	8005170 <__libc_init_array+0xc>
 8005192:	f855 3b04 	ldr.w	r3, [r5], #4
 8005196:	4798      	blx	r3
 8005198:	3601      	adds	r6, #1
 800519a:	e7f2      	b.n	8005182 <__libc_init_array+0x1e>
 800519c:	0800870c 	.word	0x0800870c
 80051a0:	0800870c 	.word	0x0800870c
 80051a4:	0800870c 	.word	0x0800870c
 80051a8:	08008710 	.word	0x08008710

080051ac <__retarget_lock_init_recursive>:
 80051ac:	4770      	bx	lr

080051ae <__retarget_lock_acquire_recursive>:
 80051ae:	4770      	bx	lr

080051b0 <__retarget_lock_release_recursive>:
 80051b0:	4770      	bx	lr
	...

080051b4 <_free_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4605      	mov	r5, r0
 80051b8:	2900      	cmp	r1, #0
 80051ba:	d040      	beq.n	800523e <_free_r+0x8a>
 80051bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c0:	1f0c      	subs	r4, r1, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfb8      	it	lt
 80051c6:	18e4      	addlt	r4, r4, r3
 80051c8:	f7ff fd52 	bl	8004c70 <__malloc_lock>
 80051cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005240 <_free_r+0x8c>)
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	b933      	cbnz	r3, 80051e0 <_free_r+0x2c>
 80051d2:	6063      	str	r3, [r4, #4]
 80051d4:	6014      	str	r4, [r2, #0]
 80051d6:	4628      	mov	r0, r5
 80051d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051dc:	f7ff bd4e 	b.w	8004c7c <__malloc_unlock>
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d908      	bls.n	80051f6 <_free_r+0x42>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	1821      	adds	r1, r4, r0
 80051e8:	428b      	cmp	r3, r1
 80051ea:	bf01      	itttt	eq
 80051ec:	6819      	ldreq	r1, [r3, #0]
 80051ee:	685b      	ldreq	r3, [r3, #4]
 80051f0:	1809      	addeq	r1, r1, r0
 80051f2:	6021      	streq	r1, [r4, #0]
 80051f4:	e7ed      	b.n	80051d2 <_free_r+0x1e>
 80051f6:	461a      	mov	r2, r3
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	b10b      	cbz	r3, 8005200 <_free_r+0x4c>
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d9fa      	bls.n	80051f6 <_free_r+0x42>
 8005200:	6811      	ldr	r1, [r2, #0]
 8005202:	1850      	adds	r0, r2, r1
 8005204:	42a0      	cmp	r0, r4
 8005206:	d10b      	bne.n	8005220 <_free_r+0x6c>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	4401      	add	r1, r0
 800520c:	1850      	adds	r0, r2, r1
 800520e:	4283      	cmp	r3, r0
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	d1e0      	bne.n	80051d6 <_free_r+0x22>
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4408      	add	r0, r1
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	6053      	str	r3, [r2, #4]
 800521e:	e7da      	b.n	80051d6 <_free_r+0x22>
 8005220:	d902      	bls.n	8005228 <_free_r+0x74>
 8005222:	230c      	movs	r3, #12
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	e7d6      	b.n	80051d6 <_free_r+0x22>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	1821      	adds	r1, r4, r0
 800522c:	428b      	cmp	r3, r1
 800522e:	bf01      	itttt	eq
 8005230:	6819      	ldreq	r1, [r3, #0]
 8005232:	685b      	ldreq	r3, [r3, #4]
 8005234:	1809      	addeq	r1, r1, r0
 8005236:	6021      	streq	r1, [r4, #0]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6054      	str	r4, [r2, #4]
 800523c:	e7cb      	b.n	80051d6 <_free_r+0x22>
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	200001c8 	.word	0x200001c8

08005244 <__sfputc_r>:
 8005244:	6893      	ldr	r3, [r2, #8]
 8005246:	b410      	push	{r4}
 8005248:	3b01      	subs	r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	6093      	str	r3, [r2, #8]
 800524e:	da07      	bge.n	8005260 <__sfputc_r+0x1c>
 8005250:	6994      	ldr	r4, [r2, #24]
 8005252:	42a3      	cmp	r3, r4
 8005254:	db01      	blt.n	800525a <__sfputc_r+0x16>
 8005256:	290a      	cmp	r1, #10
 8005258:	d102      	bne.n	8005260 <__sfputc_r+0x1c>
 800525a:	bc10      	pop	{r4}
 800525c:	f7ff be89 	b.w	8004f72 <__swbuf_r>
 8005260:	6813      	ldr	r3, [r2, #0]
 8005262:	1c58      	adds	r0, r3, #1
 8005264:	6010      	str	r0, [r2, #0]
 8005266:	7019      	strb	r1, [r3, #0]
 8005268:	4608      	mov	r0, r1
 800526a:	bc10      	pop	{r4}
 800526c:	4770      	bx	lr

0800526e <__sfputs_r>:
 800526e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005270:	4606      	mov	r6, r0
 8005272:	460f      	mov	r7, r1
 8005274:	4614      	mov	r4, r2
 8005276:	18d5      	adds	r5, r2, r3
 8005278:	42ac      	cmp	r4, r5
 800527a:	d101      	bne.n	8005280 <__sfputs_r+0x12>
 800527c:	2000      	movs	r0, #0
 800527e:	e007      	b.n	8005290 <__sfputs_r+0x22>
 8005280:	463a      	mov	r2, r7
 8005282:	4630      	mov	r0, r6
 8005284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005288:	f7ff ffdc 	bl	8005244 <__sfputc_r>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d1f3      	bne.n	8005278 <__sfputs_r+0xa>
 8005290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005294 <_vfiprintf_r>:
 8005294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005298:	460d      	mov	r5, r1
 800529a:	4614      	mov	r4, r2
 800529c:	4698      	mov	r8, r3
 800529e:	4606      	mov	r6, r0
 80052a0:	b09d      	sub	sp, #116	@ 0x74
 80052a2:	b118      	cbz	r0, 80052ac <_vfiprintf_r+0x18>
 80052a4:	6a03      	ldr	r3, [r0, #32]
 80052a6:	b90b      	cbnz	r3, 80052ac <_vfiprintf_r+0x18>
 80052a8:	f7ff fd7a 	bl	8004da0 <__sinit>
 80052ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052ae:	07d9      	lsls	r1, r3, #31
 80052b0:	d405      	bmi.n	80052be <_vfiprintf_r+0x2a>
 80052b2:	89ab      	ldrh	r3, [r5, #12]
 80052b4:	059a      	lsls	r2, r3, #22
 80052b6:	d402      	bmi.n	80052be <_vfiprintf_r+0x2a>
 80052b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ba:	f7ff ff78 	bl	80051ae <__retarget_lock_acquire_recursive>
 80052be:	89ab      	ldrh	r3, [r5, #12]
 80052c0:	071b      	lsls	r3, r3, #28
 80052c2:	d501      	bpl.n	80052c8 <_vfiprintf_r+0x34>
 80052c4:	692b      	ldr	r3, [r5, #16]
 80052c6:	b99b      	cbnz	r3, 80052f0 <_vfiprintf_r+0x5c>
 80052c8:	4629      	mov	r1, r5
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7ff fe90 	bl	8004ff0 <__swsetup_r>
 80052d0:	b170      	cbz	r0, 80052f0 <_vfiprintf_r+0x5c>
 80052d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052d4:	07dc      	lsls	r4, r3, #31
 80052d6:	d504      	bpl.n	80052e2 <_vfiprintf_r+0x4e>
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	b01d      	add	sp, #116	@ 0x74
 80052de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e2:	89ab      	ldrh	r3, [r5, #12]
 80052e4:	0598      	lsls	r0, r3, #22
 80052e6:	d4f7      	bmi.n	80052d8 <_vfiprintf_r+0x44>
 80052e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ea:	f7ff ff61 	bl	80051b0 <__retarget_lock_release_recursive>
 80052ee:	e7f3      	b.n	80052d8 <_vfiprintf_r+0x44>
 80052f0:	2300      	movs	r3, #0
 80052f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80052f4:	2320      	movs	r3, #32
 80052f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052fa:	2330      	movs	r3, #48	@ 0x30
 80052fc:	f04f 0901 	mov.w	r9, #1
 8005300:	f8cd 800c 	str.w	r8, [sp, #12]
 8005304:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80054b0 <_vfiprintf_r+0x21c>
 8005308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800530c:	4623      	mov	r3, r4
 800530e:	469a      	mov	sl, r3
 8005310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005314:	b10a      	cbz	r2, 800531a <_vfiprintf_r+0x86>
 8005316:	2a25      	cmp	r2, #37	@ 0x25
 8005318:	d1f9      	bne.n	800530e <_vfiprintf_r+0x7a>
 800531a:	ebba 0b04 	subs.w	fp, sl, r4
 800531e:	d00b      	beq.n	8005338 <_vfiprintf_r+0xa4>
 8005320:	465b      	mov	r3, fp
 8005322:	4622      	mov	r2, r4
 8005324:	4629      	mov	r1, r5
 8005326:	4630      	mov	r0, r6
 8005328:	f7ff ffa1 	bl	800526e <__sfputs_r>
 800532c:	3001      	adds	r0, #1
 800532e:	f000 80a7 	beq.w	8005480 <_vfiprintf_r+0x1ec>
 8005332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005334:	445a      	add	r2, fp
 8005336:	9209      	str	r2, [sp, #36]	@ 0x24
 8005338:	f89a 3000 	ldrb.w	r3, [sl]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 809f 	beq.w	8005480 <_vfiprintf_r+0x1ec>
 8005342:	2300      	movs	r3, #0
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800534c:	f10a 0a01 	add.w	sl, sl, #1
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	9307      	str	r3, [sp, #28]
 8005354:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005358:	931a      	str	r3, [sp, #104]	@ 0x68
 800535a:	4654      	mov	r4, sl
 800535c:	2205      	movs	r2, #5
 800535e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005362:	4853      	ldr	r0, [pc, #332]	@ (80054b0 <_vfiprintf_r+0x21c>)
 8005364:	f000 fb6c 	bl	8005a40 <memchr>
 8005368:	9a04      	ldr	r2, [sp, #16]
 800536a:	b9d8      	cbnz	r0, 80053a4 <_vfiprintf_r+0x110>
 800536c:	06d1      	lsls	r1, r2, #27
 800536e:	bf44      	itt	mi
 8005370:	2320      	movmi	r3, #32
 8005372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005376:	0713      	lsls	r3, r2, #28
 8005378:	bf44      	itt	mi
 800537a:	232b      	movmi	r3, #43	@ 0x2b
 800537c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005380:	f89a 3000 	ldrb.w	r3, [sl]
 8005384:	2b2a      	cmp	r3, #42	@ 0x2a
 8005386:	d015      	beq.n	80053b4 <_vfiprintf_r+0x120>
 8005388:	4654      	mov	r4, sl
 800538a:	2000      	movs	r0, #0
 800538c:	f04f 0c0a 	mov.w	ip, #10
 8005390:	9a07      	ldr	r2, [sp, #28]
 8005392:	4621      	mov	r1, r4
 8005394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005398:	3b30      	subs	r3, #48	@ 0x30
 800539a:	2b09      	cmp	r3, #9
 800539c:	d94b      	bls.n	8005436 <_vfiprintf_r+0x1a2>
 800539e:	b1b0      	cbz	r0, 80053ce <_vfiprintf_r+0x13a>
 80053a0:	9207      	str	r2, [sp, #28]
 80053a2:	e014      	b.n	80053ce <_vfiprintf_r+0x13a>
 80053a4:	eba0 0308 	sub.w	r3, r0, r8
 80053a8:	fa09 f303 	lsl.w	r3, r9, r3
 80053ac:	4313      	orrs	r3, r2
 80053ae:	46a2      	mov	sl, r4
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	e7d2      	b.n	800535a <_vfiprintf_r+0xc6>
 80053b4:	9b03      	ldr	r3, [sp, #12]
 80053b6:	1d19      	adds	r1, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	9103      	str	r1, [sp, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bfbb      	ittet	lt
 80053c0:	425b      	neglt	r3, r3
 80053c2:	f042 0202 	orrlt.w	r2, r2, #2
 80053c6:	9307      	strge	r3, [sp, #28]
 80053c8:	9307      	strlt	r3, [sp, #28]
 80053ca:	bfb8      	it	lt
 80053cc:	9204      	strlt	r2, [sp, #16]
 80053ce:	7823      	ldrb	r3, [r4, #0]
 80053d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80053d2:	d10a      	bne.n	80053ea <_vfiprintf_r+0x156>
 80053d4:	7863      	ldrb	r3, [r4, #1]
 80053d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80053d8:	d132      	bne.n	8005440 <_vfiprintf_r+0x1ac>
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	3402      	adds	r4, #2
 80053de:	1d1a      	adds	r2, r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	9203      	str	r2, [sp, #12]
 80053e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053e8:	9305      	str	r3, [sp, #20]
 80053ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80054b4 <_vfiprintf_r+0x220>
 80053ee:	2203      	movs	r2, #3
 80053f0:	4650      	mov	r0, sl
 80053f2:	7821      	ldrb	r1, [r4, #0]
 80053f4:	f000 fb24 	bl	8005a40 <memchr>
 80053f8:	b138      	cbz	r0, 800540a <_vfiprintf_r+0x176>
 80053fa:	2240      	movs	r2, #64	@ 0x40
 80053fc:	9b04      	ldr	r3, [sp, #16]
 80053fe:	eba0 000a 	sub.w	r0, r0, sl
 8005402:	4082      	lsls	r2, r0
 8005404:	4313      	orrs	r3, r2
 8005406:	3401      	adds	r4, #1
 8005408:	9304      	str	r3, [sp, #16]
 800540a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800540e:	2206      	movs	r2, #6
 8005410:	4829      	ldr	r0, [pc, #164]	@ (80054b8 <_vfiprintf_r+0x224>)
 8005412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005416:	f000 fb13 	bl	8005a40 <memchr>
 800541a:	2800      	cmp	r0, #0
 800541c:	d03f      	beq.n	800549e <_vfiprintf_r+0x20a>
 800541e:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <_vfiprintf_r+0x228>)
 8005420:	bb1b      	cbnz	r3, 800546a <_vfiprintf_r+0x1d6>
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	3307      	adds	r3, #7
 8005426:	f023 0307 	bic.w	r3, r3, #7
 800542a:	3308      	adds	r3, #8
 800542c:	9303      	str	r3, [sp, #12]
 800542e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005430:	443b      	add	r3, r7
 8005432:	9309      	str	r3, [sp, #36]	@ 0x24
 8005434:	e76a      	b.n	800530c <_vfiprintf_r+0x78>
 8005436:	460c      	mov	r4, r1
 8005438:	2001      	movs	r0, #1
 800543a:	fb0c 3202 	mla	r2, ip, r2, r3
 800543e:	e7a8      	b.n	8005392 <_vfiprintf_r+0xfe>
 8005440:	2300      	movs	r3, #0
 8005442:	f04f 0c0a 	mov.w	ip, #10
 8005446:	4619      	mov	r1, r3
 8005448:	3401      	adds	r4, #1
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	4620      	mov	r0, r4
 800544e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005452:	3a30      	subs	r2, #48	@ 0x30
 8005454:	2a09      	cmp	r2, #9
 8005456:	d903      	bls.n	8005460 <_vfiprintf_r+0x1cc>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0c6      	beq.n	80053ea <_vfiprintf_r+0x156>
 800545c:	9105      	str	r1, [sp, #20]
 800545e:	e7c4      	b.n	80053ea <_vfiprintf_r+0x156>
 8005460:	4604      	mov	r4, r0
 8005462:	2301      	movs	r3, #1
 8005464:	fb0c 2101 	mla	r1, ip, r1, r2
 8005468:	e7f0      	b.n	800544c <_vfiprintf_r+0x1b8>
 800546a:	ab03      	add	r3, sp, #12
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	462a      	mov	r2, r5
 8005470:	4630      	mov	r0, r6
 8005472:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <_vfiprintf_r+0x22c>)
 8005474:	a904      	add	r1, sp, #16
 8005476:	f3af 8000 	nop.w
 800547a:	4607      	mov	r7, r0
 800547c:	1c78      	adds	r0, r7, #1
 800547e:	d1d6      	bne.n	800542e <_vfiprintf_r+0x19a>
 8005480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005482:	07d9      	lsls	r1, r3, #31
 8005484:	d405      	bmi.n	8005492 <_vfiprintf_r+0x1fe>
 8005486:	89ab      	ldrh	r3, [r5, #12]
 8005488:	059a      	lsls	r2, r3, #22
 800548a:	d402      	bmi.n	8005492 <_vfiprintf_r+0x1fe>
 800548c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800548e:	f7ff fe8f 	bl	80051b0 <__retarget_lock_release_recursive>
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	065b      	lsls	r3, r3, #25
 8005496:	f53f af1f 	bmi.w	80052d8 <_vfiprintf_r+0x44>
 800549a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800549c:	e71e      	b.n	80052dc <_vfiprintf_r+0x48>
 800549e:	ab03      	add	r3, sp, #12
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	462a      	mov	r2, r5
 80054a4:	4630      	mov	r0, r6
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <_vfiprintf_r+0x22c>)
 80054a8:	a904      	add	r1, sp, #16
 80054aa:	f000 f87d 	bl	80055a8 <_printf_i>
 80054ae:	e7e4      	b.n	800547a <_vfiprintf_r+0x1e6>
 80054b0:	080086d6 	.word	0x080086d6
 80054b4:	080086dc 	.word	0x080086dc
 80054b8:	080086e0 	.word	0x080086e0
 80054bc:	00000000 	.word	0x00000000
 80054c0:	0800526f 	.word	0x0800526f

080054c4 <_printf_common>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	4616      	mov	r6, r2
 80054ca:	4698      	mov	r8, r3
 80054cc:	688a      	ldr	r2, [r1, #8]
 80054ce:	690b      	ldr	r3, [r1, #16]
 80054d0:	4607      	mov	r7, r0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bfb8      	it	lt
 80054d6:	4613      	movlt	r3, r2
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054de:	460c      	mov	r4, r1
 80054e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e4:	b10a      	cbz	r2, 80054ea <_printf_common+0x26>
 80054e6:	3301      	adds	r3, #1
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	0699      	lsls	r1, r3, #26
 80054ee:	bf42      	ittt	mi
 80054f0:	6833      	ldrmi	r3, [r6, #0]
 80054f2:	3302      	addmi	r3, #2
 80054f4:	6033      	strmi	r3, [r6, #0]
 80054f6:	6825      	ldr	r5, [r4, #0]
 80054f8:	f015 0506 	ands.w	r5, r5, #6
 80054fc:	d106      	bne.n	800550c <_printf_common+0x48>
 80054fe:	f104 0a19 	add.w	sl, r4, #25
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	6832      	ldr	r2, [r6, #0]
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	42ab      	cmp	r3, r5
 800550a:	dc2b      	bgt.n	8005564 <_printf_common+0xa0>
 800550c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	3b00      	subs	r3, #0
 8005514:	bf18      	it	ne
 8005516:	2301      	movne	r3, #1
 8005518:	0692      	lsls	r2, r2, #26
 800551a:	d430      	bmi.n	800557e <_printf_common+0xba>
 800551c:	4641      	mov	r1, r8
 800551e:	4638      	mov	r0, r7
 8005520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005524:	47c8      	blx	r9
 8005526:	3001      	adds	r0, #1
 8005528:	d023      	beq.n	8005572 <_printf_common+0xae>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	f003 0306 	and.w	r3, r3, #6
 8005532:	2b04      	cmp	r3, #4
 8005534:	bf14      	ite	ne
 8005536:	2500      	movne	r5, #0
 8005538:	6833      	ldreq	r3, [r6, #0]
 800553a:	f04f 0600 	mov.w	r6, #0
 800553e:	bf08      	it	eq
 8005540:	68e5      	ldreq	r5, [r4, #12]
 8005542:	f104 041a 	add.w	r4, r4, #26
 8005546:	bf08      	it	eq
 8005548:	1aed      	subeq	r5, r5, r3
 800554a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800554e:	bf08      	it	eq
 8005550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005554:	4293      	cmp	r3, r2
 8005556:	bfc4      	itt	gt
 8005558:	1a9b      	subgt	r3, r3, r2
 800555a:	18ed      	addgt	r5, r5, r3
 800555c:	42b5      	cmp	r5, r6
 800555e:	d11a      	bne.n	8005596 <_printf_common+0xd2>
 8005560:	2000      	movs	r0, #0
 8005562:	e008      	b.n	8005576 <_printf_common+0xb2>
 8005564:	2301      	movs	r3, #1
 8005566:	4652      	mov	r2, sl
 8005568:	4641      	mov	r1, r8
 800556a:	4638      	mov	r0, r7
 800556c:	47c8      	blx	r9
 800556e:	3001      	adds	r0, #1
 8005570:	d103      	bne.n	800557a <_printf_common+0xb6>
 8005572:	f04f 30ff 	mov.w	r0, #4294967295
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557a:	3501      	adds	r5, #1
 800557c:	e7c1      	b.n	8005502 <_printf_common+0x3e>
 800557e:	2030      	movs	r0, #48	@ 0x30
 8005580:	18e1      	adds	r1, r4, r3
 8005582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800558c:	4422      	add	r2, r4
 800558e:	3302      	adds	r3, #2
 8005590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005594:	e7c2      	b.n	800551c <_printf_common+0x58>
 8005596:	2301      	movs	r3, #1
 8005598:	4622      	mov	r2, r4
 800559a:	4641      	mov	r1, r8
 800559c:	4638      	mov	r0, r7
 800559e:	47c8      	blx	r9
 80055a0:	3001      	adds	r0, #1
 80055a2:	d0e6      	beq.n	8005572 <_printf_common+0xae>
 80055a4:	3601      	adds	r6, #1
 80055a6:	e7d9      	b.n	800555c <_printf_common+0x98>

080055a8 <_printf_i>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	7e0f      	ldrb	r7, [r1, #24]
 80055ae:	4691      	mov	r9, r2
 80055b0:	2f78      	cmp	r7, #120	@ 0x78
 80055b2:	4680      	mov	r8, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	469a      	mov	sl, r3
 80055b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055be:	d807      	bhi.n	80055d0 <_printf_i+0x28>
 80055c0:	2f62      	cmp	r7, #98	@ 0x62
 80055c2:	d80a      	bhi.n	80055da <_printf_i+0x32>
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	f000 80d3 	beq.w	8005770 <_printf_i+0x1c8>
 80055ca:	2f58      	cmp	r7, #88	@ 0x58
 80055cc:	f000 80ba 	beq.w	8005744 <_printf_i+0x19c>
 80055d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055d8:	e03a      	b.n	8005650 <_printf_i+0xa8>
 80055da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055de:	2b15      	cmp	r3, #21
 80055e0:	d8f6      	bhi.n	80055d0 <_printf_i+0x28>
 80055e2:	a101      	add	r1, pc, #4	@ (adr r1, 80055e8 <_printf_i+0x40>)
 80055e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005655 	.word	0x08005655
 80055f0:	080055d1 	.word	0x080055d1
 80055f4:	080055d1 	.word	0x080055d1
 80055f8:	080055d1 	.word	0x080055d1
 80055fc:	080055d1 	.word	0x080055d1
 8005600:	08005655 	.word	0x08005655
 8005604:	080055d1 	.word	0x080055d1
 8005608:	080055d1 	.word	0x080055d1
 800560c:	080055d1 	.word	0x080055d1
 8005610:	080055d1 	.word	0x080055d1
 8005614:	08005757 	.word	0x08005757
 8005618:	0800567f 	.word	0x0800567f
 800561c:	08005711 	.word	0x08005711
 8005620:	080055d1 	.word	0x080055d1
 8005624:	080055d1 	.word	0x080055d1
 8005628:	08005779 	.word	0x08005779
 800562c:	080055d1 	.word	0x080055d1
 8005630:	0800567f 	.word	0x0800567f
 8005634:	080055d1 	.word	0x080055d1
 8005638:	080055d1 	.word	0x080055d1
 800563c:	08005719 	.word	0x08005719
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800564c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005650:	2301      	movs	r3, #1
 8005652:	e09e      	b.n	8005792 <_printf_i+0x1ea>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	1d19      	adds	r1, r3, #4
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	0606      	lsls	r6, r0, #24
 800565e:	d501      	bpl.n	8005664 <_printf_i+0xbc>
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	e003      	b.n	800566c <_printf_i+0xc4>
 8005664:	0645      	lsls	r5, r0, #25
 8005666:	d5fb      	bpl.n	8005660 <_printf_i+0xb8>
 8005668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800566c:	2d00      	cmp	r5, #0
 800566e:	da03      	bge.n	8005678 <_printf_i+0xd0>
 8005670:	232d      	movs	r3, #45	@ 0x2d
 8005672:	426d      	negs	r5, r5
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005678:	230a      	movs	r3, #10
 800567a:	4859      	ldr	r0, [pc, #356]	@ (80057e0 <_printf_i+0x238>)
 800567c:	e011      	b.n	80056a2 <_printf_i+0xfa>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	0608      	lsls	r0, r1, #24
 8005684:	f853 5b04 	ldr.w	r5, [r3], #4
 8005688:	d402      	bmi.n	8005690 <_printf_i+0xe8>
 800568a:	0649      	lsls	r1, r1, #25
 800568c:	bf48      	it	mi
 800568e:	b2ad      	uxthmi	r5, r5
 8005690:	2f6f      	cmp	r7, #111	@ 0x6f
 8005692:	6033      	str	r3, [r6, #0]
 8005694:	bf14      	ite	ne
 8005696:	230a      	movne	r3, #10
 8005698:	2308      	moveq	r3, #8
 800569a:	4851      	ldr	r0, [pc, #324]	@ (80057e0 <_printf_i+0x238>)
 800569c:	2100      	movs	r1, #0
 800569e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a2:	6866      	ldr	r6, [r4, #4]
 80056a4:	2e00      	cmp	r6, #0
 80056a6:	bfa8      	it	ge
 80056a8:	6821      	ldrge	r1, [r4, #0]
 80056aa:	60a6      	str	r6, [r4, #8]
 80056ac:	bfa4      	itt	ge
 80056ae:	f021 0104 	bicge.w	r1, r1, #4
 80056b2:	6021      	strge	r1, [r4, #0]
 80056b4:	b90d      	cbnz	r5, 80056ba <_printf_i+0x112>
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	d04b      	beq.n	8005752 <_printf_i+0x1aa>
 80056ba:	4616      	mov	r6, r2
 80056bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80056c0:	fb03 5711 	mls	r7, r3, r1, r5
 80056c4:	5dc7      	ldrb	r7, [r0, r7]
 80056c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ca:	462f      	mov	r7, r5
 80056cc:	42bb      	cmp	r3, r7
 80056ce:	460d      	mov	r5, r1
 80056d0:	d9f4      	bls.n	80056bc <_printf_i+0x114>
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d10b      	bne.n	80056ee <_printf_i+0x146>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	07df      	lsls	r7, r3, #31
 80056da:	d508      	bpl.n	80056ee <_printf_i+0x146>
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	6861      	ldr	r1, [r4, #4]
 80056e0:	4299      	cmp	r1, r3
 80056e2:	bfde      	ittt	le
 80056e4:	2330      	movle	r3, #48	@ 0x30
 80056e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056ee:	1b92      	subs	r2, r2, r6
 80056f0:	6122      	str	r2, [r4, #16]
 80056f2:	464b      	mov	r3, r9
 80056f4:	4621      	mov	r1, r4
 80056f6:	4640      	mov	r0, r8
 80056f8:	f8cd a000 	str.w	sl, [sp]
 80056fc:	aa03      	add	r2, sp, #12
 80056fe:	f7ff fee1 	bl	80054c4 <_printf_common>
 8005702:	3001      	adds	r0, #1
 8005704:	d14a      	bne.n	800579c <_printf_i+0x1f4>
 8005706:	f04f 30ff 	mov.w	r0, #4294967295
 800570a:	b004      	add	sp, #16
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	f043 0320 	orr.w	r3, r3, #32
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	2778      	movs	r7, #120	@ 0x78
 800571a:	4832      	ldr	r0, [pc, #200]	@ (80057e4 <_printf_i+0x23c>)
 800571c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	6831      	ldr	r1, [r6, #0]
 8005724:	061f      	lsls	r7, r3, #24
 8005726:	f851 5b04 	ldr.w	r5, [r1], #4
 800572a:	d402      	bmi.n	8005732 <_printf_i+0x18a>
 800572c:	065f      	lsls	r7, r3, #25
 800572e:	bf48      	it	mi
 8005730:	b2ad      	uxthmi	r5, r5
 8005732:	6031      	str	r1, [r6, #0]
 8005734:	07d9      	lsls	r1, r3, #31
 8005736:	bf44      	itt	mi
 8005738:	f043 0320 	orrmi.w	r3, r3, #32
 800573c:	6023      	strmi	r3, [r4, #0]
 800573e:	b11d      	cbz	r5, 8005748 <_printf_i+0x1a0>
 8005740:	2310      	movs	r3, #16
 8005742:	e7ab      	b.n	800569c <_printf_i+0xf4>
 8005744:	4826      	ldr	r0, [pc, #152]	@ (80057e0 <_printf_i+0x238>)
 8005746:	e7e9      	b.n	800571c <_printf_i+0x174>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	e7f6      	b.n	8005740 <_printf_i+0x198>
 8005752:	4616      	mov	r6, r2
 8005754:	e7bd      	b.n	80056d2 <_printf_i+0x12a>
 8005756:	6833      	ldr	r3, [r6, #0]
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	1d18      	adds	r0, r3, #4
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	6030      	str	r0, [r6, #0]
 8005760:	062e      	lsls	r6, r5, #24
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	d501      	bpl.n	800576a <_printf_i+0x1c2>
 8005766:	6019      	str	r1, [r3, #0]
 8005768:	e002      	b.n	8005770 <_printf_i+0x1c8>
 800576a:	0668      	lsls	r0, r5, #25
 800576c:	d5fb      	bpl.n	8005766 <_printf_i+0x1be>
 800576e:	8019      	strh	r1, [r3, #0]
 8005770:	2300      	movs	r3, #0
 8005772:	4616      	mov	r6, r2
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	e7bc      	b.n	80056f2 <_printf_i+0x14a>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	2100      	movs	r1, #0
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	6032      	str	r2, [r6, #0]
 8005780:	681e      	ldr	r6, [r3, #0]
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	4630      	mov	r0, r6
 8005786:	f000 f95b 	bl	8005a40 <memchr>
 800578a:	b108      	cbz	r0, 8005790 <_printf_i+0x1e8>
 800578c:	1b80      	subs	r0, r0, r6
 800578e:	6060      	str	r0, [r4, #4]
 8005790:	6863      	ldr	r3, [r4, #4]
 8005792:	6123      	str	r3, [r4, #16]
 8005794:	2300      	movs	r3, #0
 8005796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579a:	e7aa      	b.n	80056f2 <_printf_i+0x14a>
 800579c:	4632      	mov	r2, r6
 800579e:	4649      	mov	r1, r9
 80057a0:	4640      	mov	r0, r8
 80057a2:	6923      	ldr	r3, [r4, #16]
 80057a4:	47d0      	blx	sl
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0ad      	beq.n	8005706 <_printf_i+0x15e>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	079b      	lsls	r3, r3, #30
 80057ae:	d413      	bmi.n	80057d8 <_printf_i+0x230>
 80057b0:	68e0      	ldr	r0, [r4, #12]
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	4298      	cmp	r0, r3
 80057b6:	bfb8      	it	lt
 80057b8:	4618      	movlt	r0, r3
 80057ba:	e7a6      	b.n	800570a <_printf_i+0x162>
 80057bc:	2301      	movs	r3, #1
 80057be:	4632      	mov	r2, r6
 80057c0:	4649      	mov	r1, r9
 80057c2:	4640      	mov	r0, r8
 80057c4:	47d0      	blx	sl
 80057c6:	3001      	adds	r0, #1
 80057c8:	d09d      	beq.n	8005706 <_printf_i+0x15e>
 80057ca:	3501      	adds	r5, #1
 80057cc:	68e3      	ldr	r3, [r4, #12]
 80057ce:	9903      	ldr	r1, [sp, #12]
 80057d0:	1a5b      	subs	r3, r3, r1
 80057d2:	42ab      	cmp	r3, r5
 80057d4:	dcf2      	bgt.n	80057bc <_printf_i+0x214>
 80057d6:	e7eb      	b.n	80057b0 <_printf_i+0x208>
 80057d8:	2500      	movs	r5, #0
 80057da:	f104 0619 	add.w	r6, r4, #25
 80057de:	e7f5      	b.n	80057cc <_printf_i+0x224>
 80057e0:	080086e7 	.word	0x080086e7
 80057e4:	080086f8 	.word	0x080086f8

080057e8 <__sflush_r>:
 80057e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	0716      	lsls	r6, r2, #28
 80057f0:	4605      	mov	r5, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	d454      	bmi.n	80058a0 <__sflush_r+0xb8>
 80057f6:	684b      	ldr	r3, [r1, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dc02      	bgt.n	8005802 <__sflush_r+0x1a>
 80057fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	dd48      	ble.n	8005894 <__sflush_r+0xac>
 8005802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005804:	2e00      	cmp	r6, #0
 8005806:	d045      	beq.n	8005894 <__sflush_r+0xac>
 8005808:	2300      	movs	r3, #0
 800580a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800580e:	682f      	ldr	r7, [r5, #0]
 8005810:	6a21      	ldr	r1, [r4, #32]
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	d030      	beq.n	8005878 <__sflush_r+0x90>
 8005816:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	0759      	lsls	r1, r3, #29
 800581c:	d505      	bpl.n	800582a <__sflush_r+0x42>
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	1ad2      	subs	r2, r2, r3
 8005822:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005824:	b10b      	cbz	r3, 800582a <__sflush_r+0x42>
 8005826:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005828:	1ad2      	subs	r2, r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	4628      	mov	r0, r5
 800582e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	47b0      	blx	r6
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	d106      	bne.n	8005848 <__sflush_r+0x60>
 800583a:	6829      	ldr	r1, [r5, #0]
 800583c:	291d      	cmp	r1, #29
 800583e:	d82b      	bhi.n	8005898 <__sflush_r+0xb0>
 8005840:	4a28      	ldr	r2, [pc, #160]	@ (80058e4 <__sflush_r+0xfc>)
 8005842:	410a      	asrs	r2, r1
 8005844:	07d6      	lsls	r6, r2, #31
 8005846:	d427      	bmi.n	8005898 <__sflush_r+0xb0>
 8005848:	2200      	movs	r2, #0
 800584a:	6062      	str	r2, [r4, #4]
 800584c:	6922      	ldr	r2, [r4, #16]
 800584e:	04d9      	lsls	r1, r3, #19
 8005850:	6022      	str	r2, [r4, #0]
 8005852:	d504      	bpl.n	800585e <__sflush_r+0x76>
 8005854:	1c42      	adds	r2, r0, #1
 8005856:	d101      	bne.n	800585c <__sflush_r+0x74>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b903      	cbnz	r3, 800585e <__sflush_r+0x76>
 800585c:	6560      	str	r0, [r4, #84]	@ 0x54
 800585e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005860:	602f      	str	r7, [r5, #0]
 8005862:	b1b9      	cbz	r1, 8005894 <__sflush_r+0xac>
 8005864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005868:	4299      	cmp	r1, r3
 800586a:	d002      	beq.n	8005872 <__sflush_r+0x8a>
 800586c:	4628      	mov	r0, r5
 800586e:	f7ff fca1 	bl	80051b4 <_free_r>
 8005872:	2300      	movs	r3, #0
 8005874:	6363      	str	r3, [r4, #52]	@ 0x34
 8005876:	e00d      	b.n	8005894 <__sflush_r+0xac>
 8005878:	2301      	movs	r3, #1
 800587a:	4628      	mov	r0, r5
 800587c:	47b0      	blx	r6
 800587e:	4602      	mov	r2, r0
 8005880:	1c50      	adds	r0, r2, #1
 8005882:	d1c9      	bne.n	8005818 <__sflush_r+0x30>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0c6      	beq.n	8005818 <__sflush_r+0x30>
 800588a:	2b1d      	cmp	r3, #29
 800588c:	d001      	beq.n	8005892 <__sflush_r+0xaa>
 800588e:	2b16      	cmp	r3, #22
 8005890:	d11d      	bne.n	80058ce <__sflush_r+0xe6>
 8005892:	602f      	str	r7, [r5, #0]
 8005894:	2000      	movs	r0, #0
 8005896:	e021      	b.n	80058dc <__sflush_r+0xf4>
 8005898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800589c:	b21b      	sxth	r3, r3
 800589e:	e01a      	b.n	80058d6 <__sflush_r+0xee>
 80058a0:	690f      	ldr	r7, [r1, #16]
 80058a2:	2f00      	cmp	r7, #0
 80058a4:	d0f6      	beq.n	8005894 <__sflush_r+0xac>
 80058a6:	0793      	lsls	r3, r2, #30
 80058a8:	bf18      	it	ne
 80058aa:	2300      	movne	r3, #0
 80058ac:	680e      	ldr	r6, [r1, #0]
 80058ae:	bf08      	it	eq
 80058b0:	694b      	ldreq	r3, [r1, #20]
 80058b2:	1bf6      	subs	r6, r6, r7
 80058b4:	600f      	str	r7, [r1, #0]
 80058b6:	608b      	str	r3, [r1, #8]
 80058b8:	2e00      	cmp	r6, #0
 80058ba:	ddeb      	ble.n	8005894 <__sflush_r+0xac>
 80058bc:	4633      	mov	r3, r6
 80058be:	463a      	mov	r2, r7
 80058c0:	4628      	mov	r0, r5
 80058c2:	6a21      	ldr	r1, [r4, #32]
 80058c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80058c8:	47e0      	blx	ip
 80058ca:	2800      	cmp	r0, #0
 80058cc:	dc07      	bgt.n	80058de <__sflush_r+0xf6>
 80058ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058de:	4407      	add	r7, r0
 80058e0:	1a36      	subs	r6, r6, r0
 80058e2:	e7e9      	b.n	80058b8 <__sflush_r+0xd0>
 80058e4:	dfbffffe 	.word	0xdfbffffe

080058e8 <_fflush_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	690b      	ldr	r3, [r1, #16]
 80058ec:	4605      	mov	r5, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	b913      	cbnz	r3, 80058f8 <_fflush_r+0x10>
 80058f2:	2500      	movs	r5, #0
 80058f4:	4628      	mov	r0, r5
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	b118      	cbz	r0, 8005902 <_fflush_r+0x1a>
 80058fa:	6a03      	ldr	r3, [r0, #32]
 80058fc:	b90b      	cbnz	r3, 8005902 <_fflush_r+0x1a>
 80058fe:	f7ff fa4f 	bl	8004da0 <__sinit>
 8005902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f3      	beq.n	80058f2 <_fflush_r+0xa>
 800590a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800590c:	07d0      	lsls	r0, r2, #31
 800590e:	d404      	bmi.n	800591a <_fflush_r+0x32>
 8005910:	0599      	lsls	r1, r3, #22
 8005912:	d402      	bmi.n	800591a <_fflush_r+0x32>
 8005914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005916:	f7ff fc4a 	bl	80051ae <__retarget_lock_acquire_recursive>
 800591a:	4628      	mov	r0, r5
 800591c:	4621      	mov	r1, r4
 800591e:	f7ff ff63 	bl	80057e8 <__sflush_r>
 8005922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005924:	4605      	mov	r5, r0
 8005926:	07da      	lsls	r2, r3, #31
 8005928:	d4e4      	bmi.n	80058f4 <_fflush_r+0xc>
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	059b      	lsls	r3, r3, #22
 800592e:	d4e1      	bmi.n	80058f4 <_fflush_r+0xc>
 8005930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005932:	f7ff fc3d 	bl	80051b0 <__retarget_lock_release_recursive>
 8005936:	e7dd      	b.n	80058f4 <_fflush_r+0xc>

08005938 <__swhatbuf_r>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	460c      	mov	r4, r1
 800593c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005940:	4615      	mov	r5, r2
 8005942:	2900      	cmp	r1, #0
 8005944:	461e      	mov	r6, r3
 8005946:	b096      	sub	sp, #88	@ 0x58
 8005948:	da0c      	bge.n	8005964 <__swhatbuf_r+0x2c>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	2100      	movs	r1, #0
 800594e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005952:	bf14      	ite	ne
 8005954:	2340      	movne	r3, #64	@ 0x40
 8005956:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800595a:	2000      	movs	r0, #0
 800595c:	6031      	str	r1, [r6, #0]
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	b016      	add	sp, #88	@ 0x58
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	466a      	mov	r2, sp
 8005966:	f000 f849 	bl	80059fc <_fstat_r>
 800596a:	2800      	cmp	r0, #0
 800596c:	dbed      	blt.n	800594a <__swhatbuf_r+0x12>
 800596e:	9901      	ldr	r1, [sp, #4]
 8005970:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005974:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005978:	4259      	negs	r1, r3
 800597a:	4159      	adcs	r1, r3
 800597c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005980:	e7eb      	b.n	800595a <__swhatbuf_r+0x22>

08005982 <__smakebuf_r>:
 8005982:	898b      	ldrh	r3, [r1, #12]
 8005984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005986:	079d      	lsls	r5, r3, #30
 8005988:	4606      	mov	r6, r0
 800598a:	460c      	mov	r4, r1
 800598c:	d507      	bpl.n	800599e <__smakebuf_r+0x1c>
 800598e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005992:	6023      	str	r3, [r4, #0]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	2301      	movs	r3, #1
 8005998:	6163      	str	r3, [r4, #20]
 800599a:	b003      	add	sp, #12
 800599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599e:	466a      	mov	r2, sp
 80059a0:	ab01      	add	r3, sp, #4
 80059a2:	f7ff ffc9 	bl	8005938 <__swhatbuf_r>
 80059a6:	9f00      	ldr	r7, [sp, #0]
 80059a8:	4605      	mov	r5, r0
 80059aa:	4639      	mov	r1, r7
 80059ac:	4630      	mov	r0, r6
 80059ae:	f7ff f8df 	bl	8004b70 <_malloc_r>
 80059b2:	b948      	cbnz	r0, 80059c8 <__smakebuf_r+0x46>
 80059b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b8:	059a      	lsls	r2, r3, #22
 80059ba:	d4ee      	bmi.n	800599a <__smakebuf_r+0x18>
 80059bc:	f023 0303 	bic.w	r3, r3, #3
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	e7e2      	b.n	800598e <__smakebuf_r+0xc>
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d2:	81a3      	strh	r3, [r4, #12]
 80059d4:	9b01      	ldr	r3, [sp, #4]
 80059d6:	6020      	str	r0, [r4, #0]
 80059d8:	b15b      	cbz	r3, 80059f2 <__smakebuf_r+0x70>
 80059da:	4630      	mov	r0, r6
 80059dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e0:	f000 f81e 	bl	8005a20 <_isatty_r>
 80059e4:	b128      	cbz	r0, 80059f2 <__smakebuf_r+0x70>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	431d      	orrs	r5, r3
 80059f6:	81a5      	strh	r5, [r4, #12]
 80059f8:	e7cf      	b.n	800599a <__smakebuf_r+0x18>
	...

080059fc <_fstat_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	2300      	movs	r3, #0
 8005a00:	4d06      	ldr	r5, [pc, #24]	@ (8005a1c <_fstat_r+0x20>)
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	f7fa ff11 	bl	8000830 <_fstat>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	d102      	bne.n	8005a18 <_fstat_r+0x1c>
 8005a12:	682b      	ldr	r3, [r5, #0]
 8005a14:	b103      	cbz	r3, 8005a18 <_fstat_r+0x1c>
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	bd38      	pop	{r3, r4, r5, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000308 	.word	0x20000308

08005a20 <_isatty_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	2300      	movs	r3, #0
 8005a24:	4d05      	ldr	r5, [pc, #20]	@ (8005a3c <_isatty_r+0x1c>)
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	f7fa ff0f 	bl	800084e <_isatty>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_isatty_r+0x1a>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_isatty_r+0x1a>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20000308 	.word	0x20000308

08005a40 <memchr>:
 8005a40:	4603      	mov	r3, r0
 8005a42:	b510      	push	{r4, lr}
 8005a44:	b2c9      	uxtb	r1, r1
 8005a46:	4402      	add	r2, r0
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	d101      	bne.n	8005a52 <memchr+0x12>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e003      	b.n	8005a5a <memchr+0x1a>
 8005a52:	7804      	ldrb	r4, [r0, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	428c      	cmp	r4, r1
 8005a58:	d1f6      	bne.n	8005a48 <memchr+0x8>
 8005a5a:	bd10      	pop	{r4, pc}

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
